%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Black and white CMYK.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Quentin Peacock
%%CreationDate: 10/01/2014
%%BoundingBox: 0 0 567 118
%%HiResBoundingBox: 0 0 566.9277 117.8125
%%CropBox: 0 0 566.9277 117.8125
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -117.813 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 117.813 li
566.928 117.813 li
566.928 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.241107 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
95.7559 64.957 mo
95.5439 70.2031 94.7754 74.9629 93.4648 79.1328 cv
92.1953 83.1719 90.3809 86.7676 88.0703 89.8203 cv
83.7617 95.5137 78.5264 98.3584 75.0635 100.241 cv
74.7607 100.405 72.707 101.451 62.8252 106.376 cv
62.8252 64.957 li
95.7559 64.957 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .1 1 0 cmyk
@
37.5742 64.957 mo
37.5742 106.375 li
27.6973 101.453 25.6396 100.406 25.3369 100.241 cv
21.873 98.3584 16.6387 95.5137 12.3301 89.8203 cv
10.0195 86.7676 8.2041 83.1719 6.93555 79.1328 cv
5.62402 74.9629 4.85547 70.2031 4.64453 64.957 cv
37.5742 64.957 li
@
95.8184 5.93945 mo
62.8252 5.93945 li
62.8252 39.707 li
95.8184 39.707 li
95.8184 5.93945 li
95.8184 5.93945 li
cp
.16 .16 .15 1 cmyk
@
37.5742 5.93945 mo
4.58105 5.93945 li
4.58105 39.707 li
37.5742 39.707 li
37.5742 5.93945 li
37.5742 5.93945 li
cp
@
50.2002 117.813 mo
49.2012 117.279 li
47.7158 116.541 24.5283 105.016 23.1484 104.266 cv
15.6348 100.182 0 91.6846 0 61.9121 cv
0 1.35742 li
100.4 1.35742 li
100.4 61.9121 li
100.4 91.6846 84.7646 100.182 77.251 104.266 cv
75.8682 105.018 52.54 116.612 51.1982 117.279 cv
50.2002 117.813 li
cp
0 .13 .49 .98 cmyk
f
60.4141 42.1182 mo
60.4141 3.52734 li
39.9854 3.52734 li
39.9854 42.1182 li
2.16992 42.1182 li
2.16992 61.9121 li
2.16992 61.9121 li
2.16992 62.125 2.17383 62.334 2.1748 62.5469 cv
39.9854 62.5469 li
39.9854 110.27 li
45.4365 112.984 50.1953 115.351 50.1953 115.351 cv
50.1963 115.351 50.2002 115.352 50.2002 115.352 cv
50.2002 115.352 50.2031 115.351 50.2041 115.351 cv
50.2041 115.351 54.9629 112.984 60.4141 110.271 cv
60.4141 62.5469 li
98.2246 62.5469 li
98.2266 62.334 98.2295 62.125 98.2295 61.9121 cv
98.2295 42.1182 li
60.4141 42.1182 li
cp
0 0 0 0 cmyk
f
39.9854 42.1182 mo
39.9854 3.52734 li
2.16992 3.52734 li
2.16992 42.1182 li
39.9854 42.1182 li
cp
0 .13 .49 .98 cmyk
f
60.4141 42.1182 mo
98.2295 42.1182 li
98.2295 3.52734 li
60.4141 3.52734 li
60.4141 42.1182 li
cp
f
39.9854 62.5469 mo
2.1748 62.5469 li
2.39063 90.209 16.5762 98.2227 24.1855 102.359 cv
24.9561 102.778 33.0342 106.809 39.9854 110.27 cv
39.9854 62.5469 li
cp
f
60.4141 62.5469 mo
60.4141 110.271 li
67.3662 106.809 75.4434 102.778 76.2148 102.359 cv
83.8232 98.2227 98.0098 90.209 98.2246 62.5469 cv
60.4141 62.5469 li
cp
f
73.4033 52.6309 mo
74.1846 51.7031 li
73.1982 50.5313 li
72.2109 51.7031 li
72.9932 52.6309 li
73.0039 53.0996 73.0332 57.1914 70.6211 58.6543 cv
70.6211 58.6543 71.4248 58.8086 72.5049 58.5996 cv
72.5049 58.5996 72.6914 59.667 73.1982 60.8848 cv
73.7041 59.667 73.8916 58.5996 73.8916 58.5996 cv
74.9717 58.8086 75.7754 58.6543 75.7754 58.6543 cv
73.3623 57.1914 73.3916 53.0996 73.4033 52.6309 cv
cp
f
79.5615 45.6797 mo
80.3428 44.752 li
79.3564 43.5811 li
78.3691 44.752 li
79.1514 45.6797 li
79.1631 46.1484 79.1924 50.2402 76.7793 51.7031 cv
76.7793 51.7031 77.583 51.8574 78.6631 51.6504 cv
78.6631 51.6504 78.8496 52.7158 79.3564 53.9336 cv
79.8623 52.7158 80.0498 51.6504 80.0498 51.6504 cv
81.1299 51.8574 81.9336 51.7031 81.9336 51.7031 cv
79.5205 50.2402 79.5508 46.1484 79.5615 45.6797 cv
cp
f
85.7207 52.6309 mo
86.501 51.7031 li
85.5146 50.5313 li
84.5283 51.7031 li
85.3096 52.6309 li
85.3213 53.0996 85.3506 57.1914 82.9375 58.6543 cv
82.9375 58.6543 83.7422 58.8086 84.8213 58.5996 cv
84.8213 58.5996 85.0078 59.667 85.5146 60.8848 cv
86.0205 59.667 86.208 58.5996 86.208 58.5996 cv
87.2881 58.8086 88.0918 58.6543 88.0918 58.6543 cv
85.6787 57.1914 85.708 53.0996 85.7207 52.6309 cv
cp
f
91.8789 45.6797 mo
92.6592 44.752 li
91.6729 43.5811 li
90.6865 44.752 li
91.4678 45.6797 li
91.4795 46.1484 91.5088 50.2402 89.0957 51.7031 cv
89.0957 51.7031 89.9004 51.8574 90.9785 51.6504 cv
90.9785 51.6504 91.166 52.7158 91.6729 53.9336 cv
92.1797 52.7158 92.3672 51.6504 92.3672 51.6504 cv
93.4463 51.8574 94.25 51.7031 94.25 51.7031 cv
91.8379 50.2402 91.8672 46.1484 91.8789 45.6797 cv
cp
f
67.2451 45.6797 mo
68.0264 44.752 li
67.0391 43.5811 li
66.0527 44.752 li
66.834 45.6797 li
66.8457 46.1484 66.875 50.2402 64.4619 51.7031 cv
64.4619 51.7031 65.2666 51.8574 66.3457 51.6504 cv
66.3457 51.6504 66.5322 52.7158 67.0391 53.9336 cv
67.5459 52.7158 67.7334 51.6504 67.7334 51.6504 cv
68.8125 51.8574 69.6172 51.7031 69.6172 51.7031 cv
67.2041 50.2402 67.2334 46.1484 67.2451 45.6797 cv
cp
f
15.0908 52.6309 mo
15.8711 51.7031 li
14.8848 50.5313 li
13.8984 51.7031 li
14.6797 52.6309 li
14.6914 53.0996 14.7207 57.1914 12.3076 58.6543 cv
12.3076 58.6543 13.1123 58.8086 14.1914 58.5996 cv
14.1914 58.5996 14.3789 59.667 14.8848 60.8848 cv
15.3906 59.667 15.5791 58.5996 15.5791 58.5996 cv
16.6582 58.8086 17.4629 58.6543 17.4629 58.6543 cv
15.0498 57.1914 15.0791 53.0996 15.0908 52.6309 cv
cp
f
21.249 45.6797 mo
22.0293 44.752 li
21.043 43.5811 li
20.0576 44.752 li
20.8389 45.6797 li
20.8506 46.1484 20.8799 50.2402 18.4658 51.7031 cv
18.4658 51.7031 19.2705 51.8574 20.3506 51.6504 cv
20.3506 51.6504 20.5371 52.7158 21.043 53.9336 cv
21.5498 52.7158 21.7373 51.6504 21.7373 51.6504 cv
22.8164 51.8574 23.6211 51.7031 23.6211 51.7031 cv
21.208 50.2402 21.2373 46.1484 21.249 45.6797 cv
cp
f
27.4072 52.6309 mo
28.1875 51.7031 li
27.2021 50.5313 li
26.2148 51.7031 li
26.9971 52.6309 li
27.0078 53.0996 27.0371 57.1914 24.625 58.6543 cv
24.625 58.6543 25.4287 58.8086 26.5078 58.5996 cv
26.5078 58.5996 26.6953 59.667 27.2021 60.8848 cv
27.708 59.667 27.8955 58.5996 27.8955 58.5996 cv
28.9746 58.8086 29.7793 58.6543 29.7793 58.6543 cv
27.3652 57.1914 27.3965 53.0996 27.4072 52.6309 cv
cp
f
33.5654 45.6797 mo
34.3467 44.752 li
33.3604 43.5811 li
32.374 44.752 li
33.1553 45.6797 li
33.166 46.1484 33.1963 50.2402 30.7832 51.7031 cv
30.7832 51.7031 31.5869 51.8574 32.666 51.6504 cv
32.666 51.6504 32.8545 52.7158 33.3604 53.9336 cv
33.8662 52.7158 34.0537 51.6504 34.0537 51.6504 cv
35.1328 51.8574 35.9375 51.7031 35.9375 51.7031 cv
33.5244 50.2402 33.5547 46.1484 33.5654 45.6797 cv
cp
f
8.93164 45.6797 mo
9.71387 44.752 li
8.72656 43.5811 li
7.74023 44.752 li
8.52148 45.6797 li
8.5332 46.1484 8.5625 50.2402 6.14941 51.7031 cv
6.14941 51.7031 6.95313 51.8574 8.0332 51.6504 cv
8.0332 51.6504 8.2207 52.7158 8.72656 53.9336 cv
9.2334 52.7158 9.41992 51.6504 9.41992 51.6504 cv
10.5 51.8574 11.3037 51.7031 11.3037 51.7031 cv
8.8916 50.2402 8.9209 46.1484 8.93164 45.6797 cv
cp
f
50.4541 68.3047 mo
51.2344 67.377 li
50.248 66.2051 li
49.2617 67.377 li
50.0439 68.3047 li
50.0547 68.7725 50.084 72.8633 47.6709 74.3262 cv
47.6709 74.3262 48.4756 74.4824 49.5547 74.2734 cv
49.5547 74.2734 49.7422 75.3398 50.248 76.5586 cv
50.7539 75.3398 50.9414 74.2734 50.9414 74.2734 cv
52.0215 74.4824 52.8262 74.3262 52.8262 74.3262 cv
50.4121 72.8633 50.4414 68.7725 50.4541 68.3047 cv
cp
f
50.4541 89.2148 mo
51.2344 88.2861 li
50.248 87.1152 li
49.2617 88.2861 li
50.0439 89.2148 li
50.0547 89.6816 50.084 93.7754 47.6709 95.2383 cv
47.6709 95.2383 48.4756 95.3926 49.5547 95.1836 cv
49.5547 95.1836 49.7422 96.25 50.248 97.4678 cv
50.7539 96.25 50.9414 95.1836 50.9414 95.1836 cv
52.0215 95.3926 52.8262 95.2383 52.8262 95.2383 cv
50.4121 93.7754 50.4414 89.6816 50.4541 89.2148 cv
cp
f
56.1631 78.7598 mo
56.9453 77.832 li
55.958 76.6602 li
54.9717 77.832 li
55.7529 78.7598 li
55.7646 79.2275 55.7949 83.3203 53.3809 84.7832 cv
53.3809 84.7832 54.1855 84.9375 55.2656 84.7285 cv
55.2656 84.7285 55.4521 85.7949 55.958 87.0137 cv
56.4648 85.7949 56.6523 84.7285 56.6523 84.7285 cv
57.7314 84.9375 58.5352 84.7832 58.5352 84.7832 cv
56.123 83.3203 56.1523 79.2275 56.1631 78.7598 cv
cp
f
44.6787 78.7598 mo
45.4609 77.832 li
44.4736 76.6602 li
43.4873 77.832 li
44.2686 78.7598 li
44.2803 79.2275 44.3105 83.3203 41.8965 84.7832 cv
41.8965 84.7832 42.7012 84.9375 43.7803 84.7285 cv
43.7803 84.7285 43.9678 85.7949 44.4736 87.0137 cv
44.9805 85.7949 45.167 84.7285 45.167 84.7285 cv
46.2471 84.9375 47.0508 84.7832 47.0508 84.7832 cv
44.6387 83.3203 44.668 79.2275 44.6787 78.7598 cv
cp
f
56.1631 99.6689 mo
56.9453 98.7412 li
55.958 97.5703 li
54.9717 98.7412 li
55.7529 99.6689 li
55.7646 100.137 55.7949 104.229 53.3809 105.692 cv
53.3809 105.692 54.1855 105.847 55.2656 105.639 cv
55.2656 105.639 55.4521 106.705 55.958 107.923 cv
56.4648 106.705 56.6523 105.639 56.6523 105.639 cv
57.7314 105.847 58.5352 105.692 58.5352 105.692 cv
56.123 104.229 56.1523 100.137 56.1631 99.6689 cv
cp
f
44.6787 99.6689 mo
45.4609 98.7412 li
44.4736 97.5703 li
43.4873 98.7412 li
44.2686 99.6689 li
44.2803 100.137 44.3105 104.229 41.8965 105.692 cv
41.8965 105.692 42.7012 105.847 43.7803 105.639 cv
43.7803 105.639 43.9678 106.705 44.4736 107.923 cv
44.9805 106.705 45.167 105.639 45.167 105.639 cv
46.2471 105.847 47.0508 105.692 47.0508 105.692 cv
44.6387 104.229 44.668 100.137 44.6787 99.6689 cv
cp
f
50.4541 20.6855 mo
51.2344 19.7559 li
50.248 18.585 li
49.2617 19.7559 li
50.0439 20.6855 li
50.0547 21.1523 50.084 25.2441 47.6709 26.708 cv
47.6709 26.708 48.4756 26.8613 49.5547 26.6543 cv
49.5547 26.6543 49.7422 27.7207 50.248 28.9375 cv
50.7539 27.7207 50.9414 26.6543 50.9414 26.6543 cv
52.0215 26.8613 52.8262 26.708 52.8262 26.708 cv
50.4121 25.2441 50.4414 21.1523 50.4541 20.6855 cv
cp
f
56.1631 10.2305 mo
56.9453 9.30078 li
55.958 8.12988 li
54.9717 9.30078 li
55.7529 10.2305 li
55.7646 10.6973 55.7949 14.7891 53.3809 16.2529 cv
53.3809 16.2529 54.1855 16.4072 55.2656 16.1992 cv
55.2656 16.1992 55.4521 17.2656 55.958 18.4824 cv
56.4648 17.2656 56.6523 16.1992 56.6523 16.1992 cv
57.7314 16.4072 58.5352 16.2529 58.5352 16.2529 cv
56.123 14.7891 56.1523 10.6973 56.1631 10.2305 cv
cp
f
44.6787 10.2305 mo
45.4609 9.30078 li
44.4736 8.12988 li
43.4873 9.30078 li
44.2686 10.2305 li
44.2803 10.6973 44.3105 14.7891 41.8965 16.2529 cv
41.8965 16.2529 42.7012 16.4072 43.7803 16.1992 cv
43.7803 16.1992 43.9678 17.2656 44.4736 18.4824 cv
44.9805 17.2656 45.167 16.1992 45.167 16.1992 cv
46.2471 16.4072 47.0508 16.2529 47.0508 16.2529 cv
44.6387 14.7891 44.668 10.6973 44.6787 10.2305 cv
cp
f
56.1631 31.1406 mo
56.9453 30.2119 li
55.958 29.041 li
54.9717 30.2119 li
55.7529 31.1406 li
55.7646 31.6074 55.7949 35.6992 53.3809 37.1631 cv
53.3809 37.1631 54.1855 37.3164 55.2656 37.1094 cv
55.2656 37.1094 55.4521 38.1758 55.958 39.3926 cv
56.4648 38.1758 56.6523 37.1094 56.6523 37.1094 cv
57.7314 37.3164 58.5352 37.1631 58.5352 37.1631 cv
56.123 35.6992 56.1523 31.6074 56.1631 31.1406 cv
cp
f
44.6787 31.1406 mo
45.4609 30.2119 li
44.4736 29.041 li
43.4873 30.2119 li
44.2686 31.1406 li
44.2803 31.6074 44.3105 35.6992 41.8965 37.1631 cv
41.8965 37.1631 42.7012 37.3164 43.7803 37.1094 cv
43.7803 37.1094 43.9678 38.1758 44.4736 39.3926 cv
44.9805 38.1758 45.167 37.1094 45.167 37.1094 cv
46.2471 37.3164 47.0508 37.1631 47.0508 37.1631 cv
44.6387 35.6992 44.668 31.6074 44.6787 31.1406 cv
cp
f
31.8184 22.582 mo
31.9468 23.0625 li
32.0625 23.4951 32.147 23.8389 32.2041 24.0889 cv
32.6069 25.9199 32.9473 26.3994 33.8359 26.3994 cv
34.3442 26.3994 34.7661 26.1172 34.895 25.6924 cv
35.0889 25.0498 li
35.1309 24.9023 35.2441 24.8154 35.3955 24.8154 cv
35.7422 24.8154 35.9048 25.1758 35.9194 25.9805 cv
35.9263 26.2109 36.0005 26.7344 36.1465 27.5498 cv
36.231 28.0322 36.2725 28.501 36.2725 28.9482 cv
36.2725 29.3613 36.2412 29.5303 36.0825 29.9531 cv
36.1919 30.582 36.2754 31.4297 36.2754 31.916 cv
36.2754 32.71 36.1265 33.4453 35.8896 33.8311 cv
36.0229 34.3623 36.0522 34.5752 36.0522 35.0381 cv
36.0522 35.3809 36.0181 35.7529 35.9526 36.1074 cv
35.8125 36.877 35.7822 37.0723 35.7822 37.2148 cv
35.7822 37.3604 35.8101 37.5049 35.8569 37.6455 cv
35.9194 37.8301 35.9526 37.958 35.9526 38.0293 cv
35.9526 38.1201 35.9106 38.1904 35.8569 38.1904 cv
35.2163 37.9336 li
34.5107 37.5498 li
34.2837 37.4248 34.125 37.3018 33.7744 36.9746 cv
33.1509 37.5352 32.9653 37.6182 31.3379 38.0645 cv
31.0127 38.1504 30.772 38.25 30.6318 38.3535 cv
30.4316 38.498 30.2817 38.5752 30.2061 38.5752 cv
29.9312 38.5752 29.7979 38.1328 29.7979 37.2168 cv
29.7979 36.5391 29.8667 35.9072 29.9917 35.4326 cv
29.5127 35.249 29.106 35.1455 28.8462 35.1455 cv
28.7969 35.1455 28.6338 35.168 28.3569 35.208 cv
28.2368 35.2188 li
28.1436 35.2188 28.0645 35.0781 28.0645 34.9111 cv
28.0645 34.7861 28.1514 34.4775 28.2612 34.2158 cv
28.5801 33.4473 li
28.6968 33.1689 28.9619 32.8486 29.3501 32.5195 cv
29.6665 32.248 29.9551 32.083 30.1836 32.0352 cv
31.3379 31.8135 li
32.0234 31.6797 32.4321 31.3154 32.4321 30.8398 cv
32.4321 30.3789 32.123 30.0674 31.4336 29.8252 cv
30.0557 29.3447 li
29.7007 29.2217 29.2808 29.0146 28.8042 28.7363 cv
28.04 28.2832 27.9121 28.2227 27.729 28.2227 cv
27.4541 28.2227 27.2954 28.4307 27.2954 28.793 cv
27.2954 29.3633 27.666 29.7617 28.1943 29.7617 cv
28.3013 29.7617 28.4126 29.7383 28.5156 29.6973 cv
28.6719 29.6348 28.7842 29.5996 28.8462 29.5996 cv
28.9907 29.5996 29.0703 29.6846 29.0703 29.8438 cv
29.0615 29.9844 li
28.9971 30.5293 li
28.9419 30.9961 28.6416 31.5596 27.9712 32.4541 cv
27.6851 32.8389 li
27.4238 33.8701 26.7813 34.8105 25.9546 35.3711 cv
25.7451 35.5107 25.6255 35.5977 25.6001 35.626 cv
25.5723 35.6553 25.4868 35.8086 25.3433 36.0742 cv
25.2788 36.1982 25.063 36.4541 24.7026 36.8447 cv
24.4326 37.1396 24.1631 37.3838 23.9009 37.5811 cv
23.543 37.8525 23.3262 38.0498 23.2607 38.1592 cv
22.9404 38.7051 li
22.8813 38.8037 22.7856 38.8643 22.6821 38.8643 cv
22.3994 38.8643 22.1377 38.5693 21.9775 38.0645 cv
21.8613 37.6895 21.7554 37.5811 21.5137 37.5811 cv
21.3887 37.5811 21.2007 37.6143 20.9541 37.6787 cv
20.5054 37.7402 li
19.3496 37.7402 li
18.7734 37.7402 17.959 37.8906 17.5874 38.0645 cv
17.4385 38.1328 17.3276 38.165 17.2568 38.165 cv
17.1763 38.165 17.1284 38.123 17.0425 37.9678 cv
16.9858 37.8604 16.9722 37.8096 16.9722 37.7109 cv
16.9722 37.124 17.3906 36.0225 17.9385 35.1455 cv
18.2896 34.5918 18.3989 34.4639 18.8037 34.1201 cv
18.6738 33.5771 18.3271 33.1553 17.9087 33.0313 cv
17.3628 32.8711 li
17.2871 32.8486 17.2329 32.7842 17.2329 32.7158 cv
17.2329 32.5488 17.4941 32.3213 17.9727 32.0693 cv
18.5981 31.7393 19.2285 31.5557 19.7329 31.5557 cv
20.2656 31.5557 20.7798 31.7666 21.3701 32.2305 cv
22.2397 32.9092 22.4717 33.0342 22.8965 33.0342 cv
23.582 33.0342 24.2339 32.4063 24.2339 31.748 cv
24.2339 31.3096 24.001 30.8398 23.3877 30.0488 cv
22.4956 28.8936 22.2271 28.293 22.2271 27.4453 cv
22.2271 26.9189 22.3896 26.2461 22.5864 25.9463 cv
22.9077 25.4688 li
22.9756 25.3604 23.0146 25.2549 23.0146 25.1592 cv
23.0146 24.9443 22.7681 24.79 22.4351 24.79 cv
21.9297 24.79 20.9565 25.1514 20.1826 25.626 cv
19.7993 25.8613 19.5371 26.1367 19.5371 26.3096 cv
19.5371 26.4102 19.5874 26.502 19.6699 26.5566 cv
20.0239 26.7813 li
20.0654 26.8076 20.0928 26.8584 20.0928 26.915 cv
20.0928 26.96 20.0386 27.0615 19.9595 27.165 cv
19.3179 27.998 li
18.9878 28.4307 18.4771 28.9639 17.9727 29.4082 cv
17.8027 29.5576 17.6968 29.6641 17.6514 29.7305 cv
17.6475 29.7344 17.562 29.8945 17.397 30.2119 cv
17.1675 30.6387 16.561 31.2588 15.9849 31.6533 cv
15.7495 31.8154 15.5996 31.9336 15.5366 32.0059 cv
15.4897 32.0596 15.4038 32.2109 15.2808 32.4541 cv
15.2002 32.6104 15.0596 32.8359 14.8618 33.126 cv
14.5493 33.5908 14.2896 33.9229 14.0942 34.1201 cv
13.1953 35.0186 li
12.9185 35.293 12.6772 35.8311 12.2979 37.0029 cv
12.0728 37.7129 11.8672 38.1299 11.7485 38.1299 cv
11.6943 38.1299 11.6064 38.0586 11.4976 37.9336 cv
10.8623 37.209 10.3164 36.7783 10.0283 36.7783 cv
9.9624 36.7783 9.8418 36.834 9.67139 36.9404 cv
9.43652 37.0869 9.14453 37.1992 8.80518 37.2627 cv
7.62061 37.4844 li
6.72412 37.6543 6.37012 37.8486 5.85693 38.4473 cv
5.73389 38.5889 5.63281 38.6699 5.57715 38.6699 cv
5.479 38.6699 5.40723 38.5107 5.40723 38.2979 cv
5.43994 37.999 li
5.60254 37.1348 li
5.77246 36.209 5.98438 35.5205 6.24316 35.0498 cv
6.78467 34.0557 li
6.89307 33.8623 6.94629 33.6855 6.94629 33.5361 cv
6.94629 32.7969 6.18359 32.1211 5.24951 32.0352 cv
5.01221 32.0156 4.92188 31.959 4.92188 31.8262 cv
4.92188 31.6641 5.18262 31.3428 5.53809 31.0752 cv
6.17969 30.5879 7.01807 30.2402 7.55615 30.2402 cv
7.88037 30.2402 8.38184 30.377 8.99707 30.625 cv
9.70313 30.9141 li
9.96484 31.0234 10.207 31.0791 10.4175 31.0791 cv
11.1641 31.0791 11.8872 30.3984 12.7783 28.8662 cv
13.1807 28.1719 13.3555 27.6709 13.3555 27.2197 cv
13.3555 26.4102 12.9722 25.916 12.3384 25.916 cv
11.8584 25.916 11.3325 26.1455 10.9531 26.5215 cv
10.6304 26.8477 10.4604 27.1885 10.4604 27.5146 cv
10.4717 27.8711 li
10.4756 27.9502 li
10.4756 28.25 10.376 28.417 10.1968 28.417 cv
9.89307 28.417 9.45459 27.9854 8.19678 26.4609 cv
7.25879 25.3242 7.04932 24.8379 7.01025 23.7021 cv
5.92236 22.3164 5.65283 21.7285 5.65283 20.7432 cv
5.69727 20.082 li
4.94434 19.1768 4.73291 18.6826 4.73291 17.8525 cv
4.73291 17.5498 4.78174 17.3701 4.95996 17.0068 cv
4.57764 16.4443 4.4541 16.1924 4.35059 15.7568 cv
4.19043 15.0811 li
4.08105 14.623 3.9082 14.2266 3.67773 13.8955 cv
3.38525 13.4814 3.35645 13.4248 3.35645 13.2822 cv
3.35645 12.9111 3.6123 12.7637 4.73682 12.4854 cv
4.69092 12.1738 4.6709 11.9346 4.6709 11.7744 cv
4.6709 11.5898 4.69238 11.4082 4.76807 11.0107 cv
4.99121 9.82324 li
5.08203 9.34375 5.12842 9.00195 5.12842 8.79688 cv
5.12842 8.5752 5.09277 8.41797 4.89404 7.77539 cv
4.7832 7.40918 4.68604 7.16016 4.60791 7.03613 cv
4.50195 6.87207 4.4126 6.66992 4.4126 6.59668 cv
4.4126 6.48535 4.49219 6.4209 4.63281 6.4209 cv
4.95215 6.4209 5.79004 6.92969 6.65723 7.64648 cv
8.49658 9.16895 8.87598 9.77734 9.12695 11.6191 cv
9.14551 11.7637 9.17578 11.9766 9.22266 12.2637 cv
10.105 12.9111 10.5688 13.6943 10.5688 14.5352 cv
10.5688 15.1963 10.3267 15.9678 9.92725 16.5889 cv
9.28516 17.583 li
9.09668 17.874 8.99707 18.2402 8.99707 18.6426 cv
8.99707 19.2461 9.1709 19.7998 9.60596 20.5615 cv
10.0972 21.4268 10.5161 21.7813 11.0342 21.7813 cv
11.8784 21.7813 12.6196 20.3105 12.6196 18.6387 cv
12.6196 18.415 li
12.6143 17.8379 li
12.6143 17.5117 12.6333 17.1885 12.6841 16.7822 cv
12.7432 16.2832 12.7744 15.9736 12.7783 15.8525 cv
12.8125 15.0811 li
12.8228 14.5752 li
12.8228 14.3965 12.728 14.2148 12.4897 13.9619 cv
11.7876 13.1914 li
10.7666 12.0791 10.207 11.0352 10.207 10.252 cv
10.207 9.2793 10.9077 8.54688 11.8433 8.54688 cv
12.0293 8.54688 12.1987 8.57813 12.5225 8.67188 cv
12.5225 8.45313 li
12.5225 7.04004 12.8125 5.99512 13.2007 5.99512 cv
13.3545 6.04492 li
13.9331 6.55664 li
14.6367 7.00586 li
14.8306 7.19727 li
14.8306 6.80078 14.8506 6.75879 15.249 6.29883 cv
15.3447 6.18945 15.4922 5.98633 15.6968 5.69141 cv
15.8579 5.4541 15.9663 5.29395 16.0151 5.21094 cv
16.0654 5.12891 16.1201 5.03125 16.1777 4.92188 cv
16.2622 4.75781 16.3481 4.68262 16.4429 4.68262 cv
16.5322 4.68262 16.6055 4.79883 16.7212 5.14844 cv
16.7969 5.36621 16.8472 5.42578 17.397 5.91602 cv
17.5874 6.08789 17.7183 6.22949 17.7788 6.33398 cv
17.833 6.4209 17.9189 6.63477 18.0371 6.97266 cv
18.0576 7.03027 18.0879 7.11426 18.1333 7.23047 cv
18.3711 6.92969 18.4873 6.82227 18.7734 6.65234 cv
19.2549 6.36523 li
19.4341 6.25586 19.5586 6.19922 19.6104 6.19922 cv
19.6504 6.19922 19.7124 6.27637 19.7681 6.39453 cv
19.8184 6.50977 19.9053 6.66699 20.0239 6.87598 cv
20.3643 7.4707 20.479 7.75781 20.479 8.03613 cv
20.4702 8.35156 li
20.4702 8.73633 li
21.5234 9.06641 21.917 9.61133 21.917 10.7432 cv
21.917 11.5586 21.4897 12.4951 20.6641 13.4795 cv
20.1133 14.1357 20.0503 14.2656 20.0503 14.7227 cv
20.0503 17.0947 21.7012 18.4678 24.6069 18.5107 cv
26.7534 18.543 li
28.1353 18.5645 28.9595 18.7012 30.2466 19.1191 cv
31.7715 19.6162 32.2139 19.7305 32.6553 19.7305 cv
32.8037 19.7305 32.9492 19.6836 33.0698 19.5996 cv
33.1885 19.5186 33.2603 19.4102 33.2603 19.3154 cv
33.2603 18.8662 32.4722 18.5059 29.896 17.7744 cv
24.6094 16.2773 22.3643 14.1484 22.3643 10.6475 cv
22.3643 7.94141 24.6143 5.84668 27.5239 5.84668 cv
28.4614 5.84668 29.9023 6.09375 30.728 6.39453 cv
32.04 6.87598 li
32.2817 6.96484 32.5137 7.01074 32.7319 7.01074 cv
33.1782 7.01074 33.4053 6.63867 33.4204 5.88184 cv
33.4302 5.47852 33.5215 5.33789 33.7856 5.33789 cv
34.1553 5.33789 34.7261 5.7998 35.2471 6.52441 cv
35.7749 7.25586 36.1152 8.08008 36.1152 8.62891 cv
36.1152 9.3584 35.772 9.86523 34.9907 10.3066 cv
34.271 11.4023 33.3862 11.9082 32.1973 11.9082 cv
31.271 11.9082 29.9551 11.3848 27.7793 10.1465 cv
27.0205 9.7168 26.6338 9.57129 26.2339 9.57129 cv
25.6685 9.57129 25.2988 9.89844 25.2988 10.4023 cv
25.2988 10.8643 25.6567 11.1641 26.5947 11.4912 cv
27.979 11.9766 28.3203 12.165 28.8696 12.7432 cv
30.502 13.0264 31.2129 13.3096 32.2363 14.0879 cv
35.0488 14.9814 36.7935 16.8984 36.7935 19.0986 cv
36.7935 21.2383 35.3452 22.7764 33.3335 22.7764 cv
32.8555 22.7764 32.5605 22.7402 31.8184 22.582 cv
true sop
0 .13 .49 .98 nzopmsc
f
34.9907 36.6201 mo
34.9038 36.2344 34.8726 36.0361 34.8726 35.8467 cv
34.895 35.5947 li
34.9907 35.0811 li
35.0249 34.667 li
35.0249 34.2217 34.9492 33.9053 34.7993 33.7051 cv
34.4136 33.1914 li
34.2886 33.0205 34.1763 32.8145 34.0947 32.5801 cv
34.0503 32.4648 34.0288 32.3711 34.0288 32.3105 cv
34.0288 32.165 34.1162 32.0752 34.2607 32.0752 cv
34.3467 32.0752 34.3809 32.0908 34.6709 32.2617 cv
34.7954 32.335 34.9038 32.3711 34.9844 32.3711 cv
35.1748 32.3711 35.2808 32.0615 35.2808 31.5176 cv
35.2808 30.8994 35.2241 30.5547 35.0889 30.4014 cv
34.6064 29.8574 li
34.1904 29.5049 li
34.0898 29.418 34.02 29.3096 34.02 29.2256 cv
34.02 29.0879 34.126 28.9912 34.2813 28.9912 cv
34.4263 28.9912 34.7339 29.0605 34.9907 29.1533 cv
35.1372 29.1836 li
35.2695 29.1836 35.3198 29.1074 35.3198 28.918 cv
35.312 28.8008 li
35.2153 28.126 li
35.0249 27.4219 li
34.9619 27.1924 34.9263 27.1572 34.7817 27.1572 cv
34.7012 27.167 li
33.9028 27.3252 li
33.7744 27.3379 li
32.7241 27.3379 31.6138 26.4512 31.2739 25.3389 cv
30.6333 23.2559 li
30.4351 22.6123 29.9551 22.002 29.0933 21.2979 cv
28.8345 21.0859 28.6113 20.9658 28.4541 20.9492 cv
27.875 20.8828 li
27.7695 20.8711 27.7012 20.8105 27.7012 20.7227 cv
27.7012 20.5918 27.8247 20.5313 28.1001 20.5313 cv
29.1572 20.626 li
29.543 20.6621 30.1255 20.8125 30.8877 21.0752 cv
31.8472 21.4053 32.4941 21.5469 33.0386 21.5469 cv
34.6406 21.5469 35.6011 20.6797 35.6011 19.2305 cv
35.6011 18.2383 35.0815 17.1152 34.2886 16.3945 cv
33.8359 15.9912 33.3862 15.6875 33.2295 15.6875 cv
33.1392 15.6875 33.0674 15.7617 33.0674 15.8574 cv
33.1001 16.2666 li
33.1025 16.3047 li
33.1025 16.4648 33.0083 16.5898 32.8833 16.5898 cv
32.7207 16.5898 32.5391 16.3789 32.3301 15.9482 cv
31.7236 14.6865 30.7617 13.9365 29.7661 13.9365 cv
29.5972 13.9365 29.48 14.0068 29.48 14.1064 cv
29.48 14.1719 29.5317 14.3291 29.6377 14.5703 cv
29.8936 15.1465 li
29.9614 15.2988 29.998 15.3984 29.998 15.4414 cv
29.998 15.4775 29.9365 15.5127 29.8618 15.5127 cv
29.7134 15.5127 29.48 15.3818 29.3174 15.2119 cv
28.8394 14.6982 li
28.4214 14.0557 li
28.0859 13.5439 27.8188 13.3105 27.1064 12.9355 cv
26.7095 12.7236 26.4531 12.584 26.3374 12.5186 cv
26.1899 12.4346 26.0537 12.3887 25.939 12.3887 cv
25.8247 12.3887 25.7676 12.4434 25.7676 12.5557 cv
25.7676 12.6592 25.812 12.7813 25.8901 12.9033 cv
26.127 13.2695 26.2192 13.4512 26.2192 13.5459 cv
26.2192 13.6475 26.1436 13.7354 26.0537 13.7354 cv
25.8071 13.7354 25.2876 13.2314 24.8311 12.5508 cv
24.4541 11.9863 24.2529 11.3574 24.2529 10.75 cv
24.2529 9.37207 25.2583 8.34863 26.6201 8.34863 cv
27.3232 8.34863 28.2109 8.64648 29.0303 9.15137 cv
30.5361 10.082 li
31.0596 10.4063 31.8296 10.6592 32.2886 10.6592 cv
32.4922 10.6592 32.915 10.5869 33.2285 10.498 cv
33.3687 10.46 33.4985 10.4063 33.6128 10.3389 cv
33.7012 10.2852 33.7642 10.2129 33.7642 10.1582 cv
33.7642 10.0938 33.729 10.0361 33.6758 10.0186 cv
33.4844 9.95508 li
32.7798 9.82422 li
32.5972 9.79199 32.3047 9.68457 31.9165 9.50293 cv
31.0693 9.11719 30.5327 8.84766 30.312 8.70313 cv
29.7852 8.35742 29.4307 8.15527 29.2554 8.0957 cv
28.9946 8.00781 28.832 7.89063 28.832 7.79102 cv
28.832 7.69531 28.8813 7.65039 28.9761 7.65039 cv
29.0664 7.65039 29.1865 7.69141 29.3174 7.77246 cv
29.79 8.06738 30.2012 8.22266 30.5034 8.22266 cv
31.8823 8.70313 li
32.5669 8.94141 33.564 9.15137 34.0142 9.15137 cv
34.5952 9.15137 35.0664 8.67773 35.0664 8.0918 cv
35.0664 7.71582 34.8418 7.15137 34.5107 6.68555 cv
34.436 6.58105 34.3594 6.52148 34.2949 6.52148 cv
34.1655 6.52148 34.0957 6.61426 34.0957 6.7793 cv
34.125 7.03711 li
34.1753 7.41992 li
34.1753 7.83594 33.8955 8.16211 33.54 8.16211 cv
33.4092 8.16211 33.2402 8.12793 33.0356 8.06055 cv
30.9536 7.39063 li
29.2061 6.82617 28.3999 6.65234 27.5239 6.65234 cv
25.0317 6.65625 23.1309 8.36621 23.1309 10.6172 cv
23.1309 13.167 24.9224 14.8125 29.3501 16.3311 cv
33.7065 17.8271 34.3188 18.1904 34.3188 19.3135 cv
34.3188 19.9561 33.666 20.5313 32.9385 20.5313 cv
32.6436 20.5313 32.3853 20.5068 32.1699 20.4668 cv
32.022 20.4355 31.2964 20.2646 29.9917 19.9551 cv
28.6758 19.6387 27.4795 19.5039 26.002 19.5039 cv
22.8574 19.5039 21.1143 20.0547 19.605 21.5254 cv
19.2295 21.8926 19.1025 21.9482 18.6689 21.9482 cv
18.4531 21.9404 li
18.0044 21.9092 li
17.9463 21.9082 li
17.5684 21.9082 17.2925 22.083 17.0425 22.4863 cv
16.7036 23.0283 16.5205 23.3184 16.4971 23.3525 cv
16.4077 23.4736 16.271 23.5439 16.1313 23.5439 cv
15.8428 23.5439 15.6714 23.3262 15.3447 22.5518 cv
15.186 22.1738 14.9565 21.8457 14.6719 21.5869 cv
14.0303 21.0098 li
13.9253 20.917 13.8687 20.8301 13.8687 20.7656 cv
13.8687 20.6943 13.9141 20.5918 13.9961 20.4668 cv
14.3037 20.0205 14.4097 19.8213 14.4463 19.6309 cv
14.5317 19.2051 14.5444 19.1846 14.7197 19.1846 cv
14.9189 19.1846 14.9756 19.3818 14.9907 20.1152 cv
14.9956 20.3271 15.0811 20.6211 15.249 20.9795 cv
15.6021 21.749 li
15.646 21.8486 15.7598 21.9111 15.8906 21.9111 cv
16.2222 21.9111 16.6416 21.1318 16.7554 20.3066 cv
16.8472 19.6182 16.9204 19.4063 17.0625 19.4063 cv
17.1221 19.4063 17.1738 19.4307 17.2031 19.4736 cv
17.2354 19.5205 17.334 19.7119 17.4912 20.0498 cv
17.5757 20.2275 17.7173 20.3926 17.9087 20.5313 cv
18.0928 20.667 18.2236 20.7432 18.293 20.7568 cv
18.332 20.7607 li
18.5918 20.7607 18.6802 20.5908 18.7417 19.9854 cv
18.7734 19.666 li
18.709 19.2148 li
18.6641 18.9053 li
18.6641 18.6992 18.7368 18.5752 18.854 18.5752 cv
18.9248 18.5752 19.0103 18.6201 19.0938 18.7031 cv
19.415 19.0254 li
19.6279 19.2363 19.8438 19.3447 20.0488 19.3447 cv
20.3149 19.3447 20.479 19.2363 20.479 19.0605 cv
20.479 18.9063 20.4194 18.7549 20.1826 18.3193 cv
19.9595 17.9033 li
19.7021 17.4199 19.498 17.2285 19.2573 17.2285 cv
18.9336 17.2598 li
18.5513 17.4199 li
18.4331 17.4678 18.3486 17.4941 18.2993 17.4941 cv
18.2388 17.4941 18.1973 17.4395 18.1973 17.3672 cv
18.1973 17.0801 18.3838 16.627 18.7417 16.0615 cv
18.9951 15.6553 19.1704 14.7881 19.2539 13.5439 cv
19.3633 11.8701 19.5874 10.7852 19.8208 10.7852 cv
19.981 10.7852 20.04 10.9199 20.04 11.2773 cv
20.0239 11.7178 li
20.0122 12.0244 li
20.0122 12.3242 20.0781 12.5645 20.1563 12.5645 cv
20.4307 12.5645 20.7563 12.1563 21.0156 11.4932 cv
21.124 11.2148 21.1812 10.9941 21.1812 10.8398 cv
21.1455 10.6904 li
20.5054 9.50293 li
19.8638 9.3125 li
19.7451 9.27734 19.6646 9.22266 19.6392 9.16895 cv
19.6392 8.73633 li
19.6392 8.38477 li
19.5752 7.99805 li
19.4453 7.67773 li
19.2876 7.32617 li
18.5845 7.70703 18.2515 7.95703 18.0044 8.28711 cv
17.7534 8.62207 17.6113 8.75098 17.4863 8.75098 cv
17.4033 8.75098 17.3311 8.67188 17.3311 8.58203 cv
17.3311 8.50195 17.3628 8.33105 17.4272 8.06055 cv
17.4473 7.88184 li
17.4473 7.19238 17.0273 6.51367 16.3379 6.07617 cv
16.1465 6.33203 li
15.9209 6.65234 li
15.5366 7.10156 li
15.4141 7.24414 15.3042 7.46191 15.2148 7.74219 cv
15.1719 7.87793 15.1494 8.00195 15.1494 8.10742 cv
15.1509 8.1582 li
15.1543 8.27539 li
15.1543 8.54102 15.1255 8.61035 15.0059 8.61035 cv
14.9263 8.5752 li
14.7017 8.25586 li
14.3506 7.87109 li
13.8057 7.51758 li
13.5181 7.29492 li
13.46 7.4209 13.4175 7.51758 13.3896 7.58203 cv
13.29 7.80469 13.2358 7.97852 13.23 8.0957 cv
13.1953 8.6084 li
13.1641 9.15137 li
13.168 9.24609 li
13.168 9.52734 13.1001 9.63477 12.9297 9.63477 cv
12.873 9.63477 12.7104 9.56641 12.5552 9.47363 cv
12.4141 9.39063 12.2515 9.34277 12.0913 9.34277 cv
11.5923 9.34277 11.272 9.6875 11.272 10.2285 cv
11.272 10.8682 11.4609 11.4834 11.7876 11.9092 cv
12.2021 12.4541 li
12.3174 12.5996 12.5288 12.7246 12.54 12.6455 cv
12.6196 11.9736 li
12.5225 11.4297 li
12.5034 11.1846 li
12.5034 10.9785 12.5752 10.8496 12.6938 10.8496 cv
12.8755 10.8496 12.9839 11.0488 13.1001 11.5879 cv
13.3545 12.7754 li
13.6128 14.2813 li
13.6812 14.6865 13.811 15.1162 13.9961 15.5625 cv
14.2505 16.167 14.4336 16.543 14.5415 16.6836 cv
14.8984 17.1416 14.9365 17.2031 14.9365 17.3047 cv
14.9365 17.3838 14.8721 17.4541 14.7988 17.4541 cv
14.731 17.4541 14.6313 17.4199 14.5103 17.3584 cv
14.3994 17.3008 14.271 17.2549 14.1255 17.2295 cv
13.875 17.1934 li
13.3594 17.1934 13.2549 17.6348 13.2549 19.7744 cv
13.2549 21.0811 13.5308 22.8525 13.8701 23.7041 cv
14.5415 25.4043 li
14.6489 25.6699 14.7017 25.9414 14.7017 26.1992 cv
14.7017 28.5371 11.6025 32.2051 8.19678 33.8975 cv
6.92969 34.5234 6.52539 35.127 6.43457 36.5234 cv
6.40283 36.9424 li
6.91846 36.6729 7.12988 36.585 7.49072 36.4932 cv
8.44629 36.2441 8.63135 36.124 8.7749 35.6582 cv
8.90088 35.2412 li
8.9502 35.084 9.03076 35.0273 9.76709 34.6328 cv
10.0205 34.5 10.1968 34.3545 10.2813 34.2178 cv
10.4424 33.9473 10.5762 33.8037 10.6621 33.8037 cv
10.7412 33.8037 10.7856 33.8408 10.7856 33.9072 cv
10.7593 34.0215 li
10.4404 34.9375 li
10.4014 35.1621 li
10.4014 35.8408 10.7729 36.3936 11.4663 36.7471 cv
11.5801 36.0059 11.6577 35.752 11.8838 35.4033 cv
12.4595 34.5049 li
12.6738 34.1709 12.7632 33.7666 12.7632 33.1328 cv
12.7632 32.7744 12.7344 32.4053 12.6841 32.1318 cv
12.6626 31.8779 li
12.6626 31.7158 12.7471 31.6211 12.8877 31.6211 cv
12.999 31.6211 13.0884 31.6602 13.1001 31.7158 cv
13.23 32.3252 li
13.2549 32.457 13.3882 32.5508 13.541 32.5508 cv
13.8496 32.5508 14.2505 32.1494 14.6719 31.4287 cv
14.8267 31.1602 14.9102 30.8682 14.9102 30.5801 cv
14.8618 30.1455 li
14.7666 29.667 li
14.7588 29.5732 li
14.7588 29.3633 14.876 29.2158 15.042 29.2158 cv
15.1157 29.2158 15.1748 29.2432 15.1846 29.2783 cv
15.375 30.0186 li
15.4395 30.2637 15.6123 30.4355 15.791 30.4355 cv
16.0063 30.4355 16.376 30.0645 16.5928 29.6328 cv
16.7871 29.251 16.8823 28.8174 16.8823 28.3223 cv
16.8823 27.6377 16.9531 27.4424 17.2031 27.4424 cv
17.2837 27.4424 17.3486 27.4707 17.3628 27.5186 cv
17.4912 27.9355 li
17.5405 28.0879 17.6313 28.1895 17.7207 28.1895 cv
17.853 28.1895 18.2124 27.8018 18.4531 27.3896 cv
18.5176 27.2832 18.5513 27.1777 18.5513 27.0918 cv
18.5513 26.9541 18.4595 26.8164 18.2617 26.6514 cv
17.9263 26.375 17.9072 26.332 17.9072 25.9141 cv
17.9072 25.5117 17.9727 25.2998 18.2617 24.7939 cv
18.4165 24.5195 18.5542 24.2646 18.6777 24.0234 cv
19.083 23.2305 19.2271 23.0273 19.375 23.0273 cv
19.498 23.0273 19.6089 23.1611 19.6089 23.3096 cv
19.6089 23.3936 19.5874 23.4844 19.542 23.5742 cv
19.4556 23.7549 19.4126 23.8828 19.4126 23.9551 cv
19.4126 24.0811 19.5186 24.1855 19.6504 24.1855 cv
19.7979 24.1855 19.9937 24.1182 20.2153 23.9932 cv
20.3013 23.9424 20.6011 23.8281 21.1113 23.6396 cv
22.1714 23.2559 li
22.3452 23.1924 22.5625 23.1582 22.813 23.1582 cv
23.0098 23.1582 23.2002 23.1797 23.3877 23.2227 cv
23.7661 23.3086 24.0132 23.3535 24.127 23.3535 cv
24.4165 23.3535 24.6738 23.1035 24.6738 22.8193 cv
24.6738 22.6055 24.4531 22.1865 24.1582 21.8457 cv
24.0483 21.7168 23.9932 21.6201 23.9932 21.5537 cv
24.0308 21.4268 li
24.0728 21.3477 24.1377 21.2979 24.2012 21.2979 cv
24.4165 21.2979 24.9233 21.8379 25.377 22.5518 cv
28.1353 26.8955 29.1255 27.9473 30.9863 28.5117 cv
32.8706 29.0859 33.3633 29.5264 33.3633 30.6455 cv
33.3633 31.2578 33.0498 31.9707 32.3643 32.9326 cv
30.9688 34.8848 30.6318 35.6738 30.6318 36.9619 cv
30.6333 37.1992 li
30.791 37.1318 30.9082 37.0781 30.9863 37.0371 cv
31.2471 36.9053 31.4214 36.8271 31.498 36.8125 cv
32.2983 36.6533 li
32.5391 36.6035 32.7534 36.2949 32.7534 35.998 cv
32.7485 35.917 li
32.6523 35.2109 li
32.645 35.1172 li
32.645 34.8672 32.7695 34.5811 32.9404 34.4404 cv
32.9932 34.4004 33.0498 34.3721 33.1074 34.3721 cv
33.1958 34.3721 33.3042 34.4561 33.3584 34.5703 cv
33.8706 35.6582 li
34.0811 36.1035 34.3252 36.3145 34.9907 36.6201 cv
false sop
0 0 0 0 cmyk
f
9.15039 13.3838 mo
8.9165 13.3838 8.79639 13.585 8.77246 14.0254 cv
8.70947 14.6328 li
8.63525 15.2012 8.63037 15.2607 8.63037 15.4082 cv
8.63037 15.8662 8.76611 16.2061 8.95166 16.2061 cv
9.15723 16.2061 9.47705 15.8145 9.63721 15.3682 cv
9.73535 15.0967 9.78223 14.8623 9.78223 14.6201 cv
9.78223 14.4082 9.73047 14.1514 9.63721 13.8955 cv
9.521 13.5693 9.34229 13.3838 9.15039 13.3838 cv
f
6.49756 8.70313 mo
6.94629 9.15137 li
7.67871 9.88281 8.03906 11.0957 8.03906 12.8213 cv
8.03906 13.2002 8.02148 13.4551 7.93945 14.4717 cv
7.89893 15.0068 7.875 15.4473 7.875 15.793 cv
7.875 19.7676 9.16699 22.7734 10.876 22.7734 cv
11.4146 22.7734 11.7637 22.5166 12.2681 21.748 cv
12.3501 21.623 12.4785 21.5166 12.5576 21.5166 cv
12.6587 21.5166 12.709 21.5996 12.7153 21.7813 cv
12.7798 22.4863 li
12.8452 23.0938 li
12.9082 23.7686 li
13.0039 24.3779 li
13.0103 24.4551 li
13.0103 24.6328 12.9321 24.7344 12.7798 24.7598 cv
12.2036 24.8584 li
11.9175 24.9033 11.6123 25.0244 11.3062 25.2109 cv
10.8223 25.501 10.5322 25.7246 10.4731 25.8516 cv
10.1211 26.5908 li
10.0718 26.6855 9.99609 26.75 9.9209 26.75 cv
9.73535 26.75 9.43652 26.4258 9.09277 25.8516 cv
8.80029 25.3633 8.62354 24.9658 8.62354 24.8047 cv
8.62354 24.7031 8.70215 24.6641 8.90479 24.6641 cv
8.9668 24.6641 li
9.38135 24.6963 li
9.63721 24.6641 li
9.92725 24.6338 li
10.0371 24.6201 10.1211 24.5234 10.1211 24.4082 cv
10.1211 24.3242 10.0684 24.248 9.99121 24.2178 cv
8.5498 23.6064 li
8.10547 23.4209 7.72021 23.0469 7.46045 22.5518 cv
7.06299 21.792 6.87939 21.3379 6.87939 21.1104 cv
6.87939 20.9131 6.98242 20.7822 7.14014 20.7822 cv
7.1958 20.7822 7.27148 20.8057 7.36328 20.8525 cv
7.50586 20.9219 7.69336 20.9814 7.76904 20.9814 cv
7.89502 20.9814 8.00635 20.8857 8.00635 20.7793 cv
8.00635 20.6924 7.8916 20.54 7.74902 20.4326 cv
6.54492 19.5596 5.85449 18.5557 5.85449 17.6895 cv
5.85449 17.4482 5.91357 17.332 6.03955 17.332 cv
6.27295 17.3574 li
6.68896 17.4199 li
6.70898 17.4199 li
6.86523 17.4199 6.98535 17.3174 6.98535 17.1729 cv
6.98535 17.085 6.87793 16.9629 6.7207 16.8779 cv
6.43555 16.7168 6.26416 16.6201 6.2085 16.5898 cv
6.02979 16.4785 5.87744 16.3262 5.76025 16.1387 cv
5.7085 16.0537 5.52637 15.7139 5.2168 15.1133 cv
4.76807 14.248 li
4.59912 13.9258 4.50293 13.7422 4.47803 13.7041 cv
4.44873 13.6572 4.38574 13.5723 4.28369 13.4473 cv
4.70361 13.2461 4.93164 13.1865 5.28223 13.1865 cv
5.71973 13.1865 5.99707 13.4727 6.30713 14.248 cv
6.5 14.7383 6.71436 15.0684 6.83496 15.0684 cv
6.896 15.0684 6.91846 14.9619 6.91846 14.6924 cv
6.91846 14.376 6.87305 14.0518 6.78467 13.7373 cv
6.70801 13.4463 6.67383 13.2061 6.68896 13.0303 cv
6.62598 12.5811 li
6.24316 12.3887 li
6.15723 12.3496 6.05762 12.2344 5.95313 12.0693 cv
5.7749 11.7881 5.69727 11.5547 5.69727 11.3398 cv
5.69727 11.2021 5.73242 10.9844 5.79297 10.7578 cv
6.11816 9.5332 6.21387 9.05859 6.21387 8.66113 cv
6.2085 8.38477 li
6.49756 8.70313 li
cp
f
10.3433 31.8135 mo
9.89551 31.748 9.68652 31.6973 9.41309 31.5879 cv
9.3374 31.5576 9.13477 31.4727 8.80518 31.334 cv
8.28857 31.1133 7.90186 31.0098 7.5791 31.0098 cv
7.09473 31.0098 6.69922 31.1738 6.24316 31.5576 cv
6.53027 31.7803 li
7.17041 32.2295 li
7.78076 32.71 li
7.93701 32.835 8.12305 32.9043 8.30859 32.9043 cv
8.93652 32.9043 9.48193 32.6104 10.3433 31.8135 cv
f
22.6846 37.6475 mo
22.8599 37.249 22.9429 37.1396 23.3262 36.8125 cv
24.2212 36.0439 24.6382 35.4736 24.6382 35.0186 cv
24.6382 34.6973 li
24.6382 34.3125 li
24.6382 33.9014 24.708 33.7666 24.9224 33.7666 cv
25.0176 33.7666 25.0947 33.8037 25.1201 33.8643 cv
25.2788 34.2461 li
25.3164 34.3369 25.4238 34.3945 25.5498 34.3945 cv
25.6719 34.3945 25.8574 34.248 26.0176 34.0215 cv
26.3389 33.5752 li
26.499 33.3516 26.5708 33.1582 26.5708 32.9492 cv
26.5708 32.8242 26.5444 32.7002 26.499 32.5801 cv
26.4727 32.5186 26.3979 32.3486 26.2744 32.0693 cv
26.2002 31.9043 26.1421 31.6836 26.1421 31.5674 cv
26.1421 31.3574 26.248 31.2334 26.4297 31.2334 cv
26.5239 31.2334 26.6084 31.2705 26.6577 31.334 cv
26.915 31.6514 li
26.9702 31.7207 27.061 31.7637 27.1582 31.7637 cv
27.2754 31.7637 27.4116 31.6514 27.4907 31.4932 cv
27.7471 30.9795 li
27.814 30.8496 27.8486 30.75 27.8486 30.6934 cv
27.8486 30.5938 27.7441 30.4902 27.5562 30.4033 cv
27.1392 30.209 li
26.5898 29.957 26.1738 29.0742 26.1738 28.1553 cv
26.1738 28.0322 26.1987 27.9111 26.2407 27.8066 cv
26.4648 27.2607 li
26.5303 27.1074 26.563 26.9346 26.563 26.75 cv
26.563 26.416 26.4531 26.0811 26.2407 25.7549 cv
25.9844 25.3604 25.8447 25.1357 25.8232 25.082 cv
25.6343 24.5752 25.5371 24.4336 25.3794 24.4336 cv
25.2173 24.4727 li
24.9927 24.5996 li
24.6382 24.7939 li
24.2222 25.3086 li
23.7739 25.5303 li
23.5054 25.665 23.252 26.2363 23.252 26.708 cv
23.252 27.541 23.3462 27.7705 24.4443 29.667 cv
24.873 30.3984 25.0972 31.0322 25.0972 31.499 cv
25.0972 32.8115 23.9214 33.7471 21.5615 34.3125 cv
20.0879 34.665 li
19.0024 34.9268 18.3623 35.6709 18.1318 36.9424 cv
18.5815 36.71 18.7583 36.6768 19.5522 36.6768 cv
20.0239 36.6826 li
20.0981 36.6836 li
20.5254 36.6836 20.5845 36.6543 20.8555 36.2666 cv
21.1733 35.8232 21.4849 35.5596 21.9146 35.373 cv
22.4277 35.1465 li
22.8447 34.9219 li
22.9717 34.8887 li
23.0864 34.8887 23.1484 34.9355 23.1484 35.0205 cv
23.1484 35.1455 23.0313 35.3555 22.8447 35.5635 cv
22.4751 35.9736 22.3315 36.3184 22.3315 36.8047 cv
22.3315 37.1133 22.4063 37.2939 22.6846 37.6475 cv
f
18.6445 32.6787 mo
19.0132 32.9092 19.3887 33.2422 19.6079 33.5439 cv
19.9141 33.9619 19.958 33.9941 20.2598 33.9941 cv
20.3896 33.9941 20.5479 33.9717 20.7285 33.9268 cv
21.0156 33.8643 li
21.5449 33.7617 21.7241 33.6846 21.7241 33.5547 cv
21.7241 33.4775 21.666 33.3789 21.5615 33.2871 cv
21.21 32.9678 li
20.8584 32.6455 li
20.6313 32.4385 20.1841 32.2861 19.8008 32.2861 cv
19.415 32.2861 19.1919 32.3643 18.6445 32.6787 cv
f
29.0303 34.4102 mo
29.2217 34.376 li
29.5117 34.3447 li
29.8003 34.376 li
29.9414 34.3857 li
30.6533 34.3857 31.3369 33.7822 31.3369 33.1465 cv
31.3369 32.9268 31.1362 32.8047 30.772 32.8047 cv
29.9082 32.8047 29.3662 33.3018 29.0303 34.4102 cv
f
17.0767 12.2637 mo
17.1108 12.5596 17.2656 12.8057 17.4233 12.8057 cv
17.5581 12.8057 17.7134 12.4512 18.0459 11.8877 cv
18.4985 11.1172 18.9346 10.3672 18.9346 9.95801 cv
18.9346 9.82227 18.8677 9.71875 18.7744 9.71875 cv
18.7417 9.72852 li
18.3887 10.0488 li
18.1333 10.2793 17.9326 10.3887 17.2983 10.625 cv
16.9365 10.7627 16.8057 10.9072 16.8057 11.1709 cv
16.8511 11.4277 li
17.0112 11.8779 li
17.0767 12.2637 li
cp
true sop
0 .13 .49 .98 nzopmsc
f
15.1206 10.5947 mo
15.6626 10.8848 li
15.8125 10.9639 15.8945 11.0684 15.8945 11.1934 cv
15.8564 11.3945 li
15.7773 11.665 15.8403 11.9658 15.8354 12.0781 cv
15.8076 12.6514 15.3726 12.6455 15.1973 12.6455 cv
15.0913 12.6455 15.147 12.5791 14.896 12.291 cv
14.1904 11.4912 li
13.9731 11.2451 13.7842 10.6836 13.7085 10.0518 cv
13.7046 9.96875 li
13.7046 9.79297 13.7607 9.72754 13.8994 9.72754 cv
13.9849 9.72754 14.1436 9.79883 14.2544 9.8916 cv
15.1206 10.5947 li
cp
f
16.3682 13.9619 mo
16.1953 13.9629 li
15.8252 13.9297 li
15.8174 13.9258 15.688 13.8506 15.4395 13.7021 cv
15.2944 13.6172 15.1367 13.5742 14.9819 13.5742 cv
14.6919 13.5742 14.5039 13.7344 14.5039 13.9766 cv
14.5039 14.2422 14.6338 14.6797 14.9263 15.4023 cv
15.3447 16.4268 li
15.7104 17.3291 16.0654 17.71 16.5371 17.71 cv
16.958 17.71 17.0137 17.2979 17.2974 16.5898 cv
17.9375 14.9785 18.2944 14.7412 18.2944 14.1709 cv
18.2944 13.7813 18.2085 13.6768 17.8545 13.6768 cv
17.5557 13.6055 li
17.0425 13.9297 li
16.3682 13.9619 li
cp
f
16.3379 14.8574 mo
15.9209 14.8574 li
15.8604 14.8574 15.7974 14.8926 15.7607 14.9531 cv
15.6978 15.1133 li
15.8564 15.8838 li
15.9849 16.5547 li
16.0557 16.9248 16.1919 17.0693 16.4678 17.0693 cv
16.7817 17.0693 16.9761 16.8545 17.0112 16.46 cv
17.0752 15.7539 li
17.1172 15.2861 17.1382 15.04 17.1382 15.0225 cv
17.1382 14.9531 17.103 14.8828 17.0425 14.8262 cv
16.9961 14.7822 16.938 14.7568 16.8813 14.7568 cv
16.8511 14.7607 li
16.3379 14.8574 li
cp
false sop
0 0 0 0 cmyk
f
91.6245 22.582 mo
91.7544 23.0625 li
91.8716 23.4951 91.9551 23.8389 92.0132 24.0889 cv
92.415 25.9199 92.7554 26.3994 93.645 26.3994 cv
94.1523 26.3994 94.5752 26.1172 94.7041 25.6924 cv
94.896 25.0498 li
94.9399 24.9023 95.0508 24.8184 95.2007 24.8184 cv
95.5498 24.8184 95.7354 25.2012 95.7617 25.9805 cv
95.7705 26.2764 95.8359 26.8008 95.9521 27.5498 cv
96.04 28.0898 96.0815 28.5859 96.0815 29.0322 cv
96.0815 29.3584 96.0415 29.5488 95.8901 29.9531 cv
95.9521 30.3379 li
96.0605 30.9697 96.0869 31.2178 96.0869 31.5146 cv
96.0869 32.8906 96.02 33.2959 95.6963 33.8311 cv
95.8296 34.3564 95.8652 34.6035 95.8652 34.9795 cv
95.8652 35.2217 95.832 35.5674 95.7617 36.1074 cv
95.6318 37.0693 li
95.6646 37.6455 li
95.7505 37.8574 95.792 37.9893 95.792 38.0293 cv
95.792 38.1201 95.7354 38.1904 95.6646 38.1904 cv
95.0244 37.9336 li
94.3198 37.5498 li
94.0913 37.4248 93.9312 37.3018 93.5835 36.9746 cv
92.9634 37.5225 92.874 37.5732 92.1377 37.7744 cv
91.0762 38.0684 90.6831 38.2012 90.4727 38.3535 cv
90.2661 38.498 90.1123 38.5752 90.0288 38.5752 cv
89.7808 38.5752 89.6069 38.0938 89.6069 37.3877 cv
89.6069 36.3613 89.667 35.833 89.8311 35.4326 cv
89.207 35.2217 88.8921 35.1455 88.665 35.1455 cv
88.5796 35.1455 88.5278 35.1514 88.1963 35.208 cv
88.0527 35.2217 li
87.9604 35.2217 87.9063 35.1074 87.9063 34.916 cv
87.9063 34.6035 88.127 33.9756 88.4219 33.4473 cv
88.8228 32.7314 89.4858 32.1357 89.9927 32.0352 cv
91.147 31.8135 li
91.8301 31.6797 92.2383 31.3154 92.2383 30.8398 cv
92.2383 30.3789 91.9385 30.0752 91.2412 29.8252 cv
89.8955 29.3447 li
89.4419 29.1826 89.0132 28.9795 88.6123 28.7363 cv
88.2744 28.5273 88.0371 28.3906 87.9092 28.3174 cv
87.7915 28.2559 87.6704 28.2227 87.5601 28.2227 cv
87.2749 28.2227 87.1011 28.4307 87.1011 28.7715 cv
87.1011 29.3135 87.522 29.7627 88.0313 29.7627 cv
88.146 29.7627 88.2554 29.7383 88.3564 29.6973 cv
88.5029 29.6348 88.6021 29.5996 88.6514 29.5996 cv
88.7979 29.5996 88.9023 29.7412 88.9023 29.9434 cv
88.9023 30.5137 88.5454 31.499 88.1646 31.9707 cv
87.7803 32.4541 li
87.4912 32.8389 li
87.3843 33.6641 86.5752 34.8457 85.7622 35.3711 cv
85.5645 35.4961 85.4443 35.5811 85.4077 35.626 cv
85.3804 35.6553 85.2969 35.8086 85.1523 36.0742 cv
85.0854 36.1982 84.8696 36.4541 84.5093 36.8447 cv
84.2397 37.1367 83.9722 37.3838 83.709 37.5811 cv
83.3511 37.8525 83.1353 38.0488 83.0688 38.1592 cv
82.7471 38.7051 li
82.6816 38.8154 82.6006 38.8701 82.4966 38.8701 cv
82.2104 38.8701 81.9468 38.5713 81.7856 38.0645 cv
81.6694 37.6895 81.5645 37.5811 81.3213 37.5811 cv
81.1968 37.5811 81.0088 37.6143 80.7607 37.6787 cv
80.313 37.7402 li
79.189 37.7402 li
78.5835 37.7402 77.772 37.8857 77.3936 38.0645 cv
77.249 38.1328 77.1377 38.165 77.0635 38.165 cv
76.8984 38.165 76.814 37.999 76.814 37.6758 cv
76.814 36.6592 77.5967 35.1172 78.6138 34.1201 cv
78.4624 33.5303 78.1528 33.1357 77.748 33.0313 cv
77.3838 32.9336 77.1919 32.8799 77.1704 32.8711 cv
77.1113 32.8398 77.0737 32.7813 77.0737 32.7188 cv
77.0737 32.5137 77.3018 32.3115 77.8125 32.0693 cv
78.7222 31.6396 78.9893 31.5557 79.4976 31.5557 cv
80.0786 31.5557 80.5693 31.7529 81.1768 32.2305 cv
82.0449 32.9063 82.2842 33.0342 82.7031 33.0342 cv
83.3872 33.0342 84.042 32.4092 84.042 31.751 cv
84.042 31.3076 83.7974 30.8154 83.1958 30.0488 cv
82.3423 28.959 82.041 28.248 82.041 27.3252 cv
82.041 26.7051 82.165 26.3662 82.7158 25.4688 cv
82.8022 25.3242 82.8506 25.2051 82.8506 25.125 cv
82.8506 24.9502 82.5581 24.79 82.2354 24.79 cv
81.8926 24.79 81.4663 24.915 80.8892 25.1787 cv
79.9248 25.6211 79.3501 26.0342 79.3501 26.2852 cv
79.3501 26.3848 79.4092 26.4854 79.5103 26.5566 cv
79.833 26.7813 li
79.873 26.8096 79.8999 26.8594 79.8999 26.915 cv
79.8999 26.9707 79.8389 27.0811 79.7661 27.165 cv
79.7031 27.2373 79.4888 27.5146 79.124 27.998 cv
78.6768 28.5928 78.25 29.042 77.7822 29.4082 cv
77.6094 29.541 77.502 29.6494 77.458 29.7305 cv
77.2036 30.2119 li
76.9893 30.6123 76.3564 31.2744 75.8232 31.6533 cv
75.5825 31.8242 75.4326 31.9434 75.376 32.0059 cv
75.3101 32.0781 75.2144 32.2285 75.0869 32.4541 cv
74.7593 33.042 74.2437 33.7646 73.9033 34.1201 cv
73.0376 35.0186 li
72.7881 35.2734 72.4399 36.0156 72.1074 37.0029 cv
71.8438 37.7813 71.6753 38.1299 71.5562 38.1299 cv
71.5024 38.1299 71.4126 38.0586 71.3066 37.9336 cv
70.6841 37.2227 70.1255 36.7783 69.8521 36.7783 cv
69.7817 36.7783 69.6558 36.8369 69.478 36.9404 cv
69.2319 37.0889 68.9409 37.1992 68.6143 37.2627 cv
67.46 37.4844 li
66.4956 37.6729 66.1099 37.8789 65.665 38.4473 cv
65.5537 38.5889 65.4595 38.6699 65.4102 38.6699 cv
65.2969 38.6699 65.2124 38.5049 65.2124 38.2803 cv
65.2451 37.999 li
65.2539 37.9688 65.3081 37.6797 65.4092 37.1348 cv
65.5742 36.2227 65.8071 35.4668 66.0493 35.0498 cv
66.6279 34.0557 li
66.73 33.876 66.7881 33.6953 66.7881 33.5391 cv
66.7881 32.7998 66.0986 32.2002 65.0552 32.0352 cv
64.8428 32.0039 64.7334 31.9248 64.7334 31.8037 cv
64.7334 31.6563 64.9844 31.374 65.3774 31.0752 cv
66.0581 30.5625 66.8057 30.2422 67.3364 30.2422 cv
67.6919 30.2422 68.1709 30.3682 68.8062 30.625 cv
69.5107 30.9141 li
69.7715 31.0234 70.0161 31.0791 70.2251 31.0791 cv
70.9717 31.0791 71.6938 30.3984 72.5874 28.8662 cv
72.9907 28.168 73.165 27.6719 73.165 27.2158 cv
73.165 26.4043 72.7881 25.916 72.1553 25.916 cv
71.6597 25.916 71.1846 26.126 70.7925 26.5215 cv
70.4434 26.876 70.2607 27.2295 70.2607 27.5459 cv
70.2783 27.8711 li
70.292 28.042 li
70.292 28.3008 70.2041 28.417 70.0127 28.417 cv
69.7705 28.417 69.4878 28.1816 68.9346 27.5166 cv
68.7051 27.2412 68.4053 26.8916 68.0361 26.4609 cv
67.0615 25.3213 66.8599 24.8643 66.8184 23.7021 cv
65.7305 22.3164 65.4619 21.5469 65.4619 20.7432 cv
65.5034 20.082 li
64.7246 19.1455 64.5732 18.7852 64.5732 17.8633 cv
64.5732 17.4482 64.5972 17.3398 64.7671 17.0068 cv
64.3843 16.4443 64.2617 16.1924 64.1587 15.7568 cv
63.9985 15.0811 li
63.8877 14.623 63.7188 14.2314 63.4854 13.8955 cv
63.1968 13.4824 63.1626 13.4219 63.1626 13.3008 cv
63.1626 12.9658 63.4829 12.751 64.2871 12.5508 cv
64.543 12.4854 li
64.499 12.1738 64.4775 11.9346 64.4775 11.7744 cv
64.4775 11.5898 64.5015 11.4082 64.5747 11.0107 cv
64.7988 9.82324 li
64.8848 9.36133 64.9302 9.00879 64.9302 8.77148 cv
64.9302 8.49805 64.8872 8.27734 64.7349 7.77539 cv
64.6362 7.44727 64.5264 7.2002 64.4146 7.03613 cv
64.291 6.85938 64.2217 6.71094 64.2217 6.61426 cv
64.2217 6.50391 64.3315 6.4209 64.4761 6.4209 cv
64.5547 6.4209 64.6895 6.46094 64.7988 6.52441 cv
65.8804 7.11426 67.064 8.05078 67.9072 8.99219 cv
68.6323 9.79785 68.8652 10.4697 69.0303 12.2637 cv
70.0137 12.9922 70.3794 13.6553 70.3794 14.6953 cv
70.3794 15.3125 70.1777 15.9092 69.7354 16.5889 cv
69.3433 17.1895 69.1299 17.5195 69.0947 17.583 cv
68.9043 17.9033 68.8047 18.2783 68.8047 18.668 cv
68.8047 19.2461 68.98 19.791 69.415 20.5615 cv
69.8926 21.4111 70.3223 21.7813 70.8325 21.7813 cv
71.6724 21.7813 72.4336 20.3291 72.4336 18.7305 cv
72.4272 18.415 li
72.4272 17.5498 li
72.5244 16.7822 li
72.5874 15.8525 li
72.6504 15.0811 li
72.6758 14.6523 li
72.6758 14.3369 72.6104 14.2461 71.6245 13.1914 cv
70.5366 12.0254 70.0225 11.042 70.0225 10.1289 cv
70.0225 9.26758 70.7637 8.54688 71.6523 8.54688 cv
71.8389 8.54688 72.0054 8.57813 72.3301 8.67188 cv
72.3301 8.28809 li
72.3633 7.6123 li
72.5547 6.78125 li
72.7085 6.11621 72.7793 5.99512 73.0083 5.99512 cv
73.165 6.04492 li
73.7432 6.55664 li
74.4458 7.00586 li
74.6396 7.19727 li
74.6851 6.79688 74.7202 6.71777 75.0557 6.29883 cv
75.2217 6.09082 75.3721 5.88672 75.5029 5.69141 cv
75.8232 5.21094 li
76.0171 4.92188 li
76.146 4.72949 76.2012 4.67969 76.2832 4.67969 cv
76.3701 4.67969 76.4307 4.79004 76.5303 5.14844 cv
76.5718 5.29297 76.6719 5.4375 76.8174 5.56445 cv
77.2363 5.91602 li
77.5742 6.20117 77.7983 6.62402 77.9395 7.23047 cv
78.1929 6.91406 78.3164 6.80078 78.5801 6.65234 cv
79.0942 6.36523 li
79.2832 6.25586 79.3994 6.20117 79.4336 6.20117 cv
79.4663 6.20117 79.5229 6.2793 79.5757 6.39453 cv
79.6499 6.5625 79.7344 6.72461 79.833 6.87598 cv
80.2461 7.54102 80.2813 7.63477 80.2813 8.08496 cv
80.2793 8.35156 li
80.2793 8.73633 li
81.3203 9.02246 81.7246 9.58203 81.7246 10.7334 cv
81.7246 11.5957 81.3306 12.4844 80.5044 13.4795 cv
79.9565 14.1377 79.8633 14.3418 79.8633 14.8379 cv
79.8633 17.0986 81.5664 18.4678 84.4463 18.5107 cv
86.561 18.543 li
87.9443 18.5645 88.7871 18.7051 90.0557 19.1191 cv
91.5391 19.6064 92.0229 19.7305 92.4731 19.7305 cv
92.7998 19.7305 93.0693 19.5469 93.0693 19.3301 cv
93.0693 18.8662 92.2939 18.5078 89.7036 17.7744 cv
84.4248 16.2832 82.1709 14.1465 82.1709 10.6484 cv
82.1709 7.93945 84.4312 5.84863 87.3555 5.84863 cv
88.2769 5.84863 89.7163 6.09473 90.5371 6.39453 cv
91.8491 6.87598 li
92.0898 6.96484 92.3228 7.01074 92.5386 7.01074 cv
92.9912 7.01074 93.1636 6.72754 93.2295 5.88184 cv
93.2588 5.50488 93.3794 5.33789 93.6201 5.33789 cv
93.9565 5.33789 94.6123 5.86621 95.0859 6.52441 cv
95.5752 7.2002 95.9219 8.0918 95.9219 8.67383 cv
95.9219 9.35742 95.5654 9.87598 94.7974 10.3066 cv
94.0801 11.4023 93.1953 11.9082 92.0054 11.9082 cv
91.0928 11.9082 89.5425 11.291 87.5884 10.1465 cv
86.8198 9.69727 86.4805 9.57129 86.0547 9.57129 cv
85.4775 9.57129 85.1069 9.89355 85.1069 10.4023 cv
85.1069 10.8672 85.4482 11.1543 86.4014 11.4912 cv
87.9189 12.0322 88.2441 12.209 88.6777 12.7432 cv
90.311 13.0264 91.02 13.3096 92.0435 14.0879 cv
94.9702 15.0264 96.5962 16.834 96.5962 19.1455 cv
96.5962 21.2529 95.1694 22.7734 93.1831 22.7734 cv
92.6543 22.7734 92.3799 22.7422 91.6245 22.582 cv
true sop
0 .13 .49 .98 nzopmsc
f
94.7998 36.6201 mo
94.7246 36.3281 94.6992 36.1885 94.6992 36.0313 cv
94.7358 35.5947 li
94.8149 34.9951 94.8389 34.708 94.8389 34.3477 cv
94.8389 34.1123 94.77 33.9229 94.6069 33.7051 cv
94.2212 33.1914 li
93.9707 32.8555 93.8711 32.6035 93.8711 32.3164 cv
93.8711 32.1318 93.9136 32.0693 94.0415 32.0693 cv
94.1899 32.1006 li
94.2065 32.1104 94.3022 32.1641 94.4771 32.2617 cv
94.6069 32.335 94.7168 32.3711 94.7974 32.3711 cv
94.9912 32.3711 95.0874 32.0703 95.0874 31.4697 cv
95.0874 30.6357 94.9312 30.2363 94.4473 29.8574 cv
93.9995 29.5049 li
93.9204 29.4424 93.8682 29.3379 93.8682 29.2432 cv
93.8682 29.0889 93.959 28.9893 94.104 28.9893 cv
94.1938 28.9893 94.3198 29.0146 94.4771 29.0557 cv
94.8315 29.1533 li
94.9678 29.1836 li
95.0771 29.1836 95.1265 29.0986 95.1265 28.9121 cv
95.1201 28.8008 li
95.0244 28.126 li
94.9224 27.4268 94.8076 27.1602 94.6006 27.1602 cv
94.5439 27.167 li
93.7109 27.3252 li
93.5698 27.3379 li
92.5688 27.3379 91.3877 26.3887 91.0815 25.3389 cv
90.4727 23.2559 li
90.2915 22.6328 89.7476 21.9453 88.9326 21.2979 cv
88.6665 21.0908 88.4341 20.9668 88.2603 20.9492 cv
87.6846 20.8828 li
87.5796 20.8711 87.5093 20.8076 87.5093 20.7256 cv
87.5093 20.5928 87.6201 20.5303 87.8569 20.5303 cv
88.6699 20.5303 89.5386 20.6963 90.6973 21.0752 cv
91.7495 21.4209 92.3247 21.5469 92.8389 21.5469 cv
94.4443 21.5469 95.4102 20.71 95.4102 19.3232 cv
95.4102 18.6279 95.1582 17.7539 94.7998 17.1973 cv
94.4873 16.7168 93.9604 16.2227 93.291 15.7881 cv
93.1929 15.7227 93.1045 15.6875 93.0391 15.6875 cv
92.9482 15.6875 92.875 15.7588 92.875 15.8506 cv
92.9077 16.2666 li
92.9092 16.3047 li
92.9092 16.4619 92.8184 16.5898 92.7051 16.5898 cv
92.5273 16.5898 92.3433 16.3818 92.1392 15.9482 cv
91.5488 14.6963 90.5972 13.9404 89.6167 13.9404 cv
89.4023 13.9404 89.2803 14.0156 89.2803 14.1465 cv
89.2803 14.2451 89.3384 14.3926 89.4468 14.5703 cv
89.5498 14.7314 89.6455 14.9268 89.7354 15.1465 cv
89.7856 15.2715 89.8125 15.3652 89.8125 15.4209 cv
89.8125 15.4795 89.7617 15.5127 89.666 15.5127 cv
89.5225 15.5127 89.2866 15.3818 89.1265 15.2119 cv
88.8066 14.8721 88.6465 14.7002 88.6445 14.6982 cv
88.229 14.0557 li
87.9053 13.5605 87.5493 13.2471 86.9482 12.9355 cv
86.144 12.5186 li
85.9839 12.4346 85.8428 12.3887 85.7344 12.3887 cv
85.6348 12.3887 85.5845 12.4385 85.5845 12.5352 cv
85.5845 12.6357 85.6338 12.7637 85.7295 12.9033 cv
85.8994 13.1543 86.0254 13.4248 86.0254 13.542 cv
86.0254 13.6514 85.9551 13.7354 85.8643 13.7354 cv
85.6396 13.7354 85.2378 13.332 84.6719 12.5508 cv
84.2661 11.9902 84.0591 11.3799 84.0591 10.75 cv
84.0591 9.40039 85.0991 8.34863 86.439 8.34863 cv
87.126 8.34863 87.9868 8.63672 88.8364 9.15137 cv
90.376 10.082 li
90.9263 10.4141 91.6699 10.6592 92.1353 10.6592 cv
92.3896 10.6592 92.4644 10.6445 93.0376 10.498 cv
93.2056 10.4551 93.3442 10.4023 93.4536 10.3389 cv
93.5229 10.2969 93.5713 10.2217 93.5713 10.1504 cv
93.5713 10.0254 93.4941 9.96875 93.291 9.95508 cv
92.5776 9.90137 91.0967 9.31738 90.1211 8.70313 cv
89.5513 8.3457 89.1973 8.1416 89.0625 8.0957 cv
88.7979 8.00195 88.6221 7.86523 88.6221 7.75488 cv
88.6221 7.70508 88.6763 7.67773 88.7607 7.67773 cv
88.9473 7.71094 li
90.3442 8.22266 li
91.689 8.70313 li
92.3496 8.9375 93.3745 9.15137 93.8433 9.15137 cv
94.4507 9.15137 94.8721 8.73145 94.8721 8.12305 cv
94.8721 7.81641 94.7964 7.46973 94.6699 7.23047 cv
94.4751 6.84766 94.2188 6.52441 94.1143 6.52441 cv
93.9893 6.52441 93.9204 6.65039 93.9204 6.86719 cv
93.9341 7.03711 li
93.9746 7.44922 li
93.9746 7.88184 93.7363 8.16309 93.3691 8.16309 cv
93.2256 8.16309 93.0493 8.12793 92.8447 8.06055 cv
90.7612 7.39063 li
88.9512 6.80566 88.2466 6.65234 87.3564 6.65234 cv
84.8384 6.65234 82.939 8.35156 82.939 10.6172 cv
82.939 13.1709 84.6919 14.7734 89.1909 16.3311 cv
93.5557 17.8438 94.124 18.1904 94.124 19.3408 cv
94.124 20.002 93.5054 20.5313 92.73 20.5313 cv
92.4438 20.5313 92.1919 20.5068 91.979 20.4668 cv
91.79 20.4277 91.064 20.2578 89.7983 19.9551 cv
88.4609 19.6309 87.3262 19.5039 85.814 19.5039 cv
82.6353 19.5039 81.1045 19.9893 79.4458 21.5254 cv
79.063 21.8828 78.9077 21.9482 78.479 21.9482 cv
78.2622 21.9404 li
77.7568 21.9082 li
77.3721 21.9082 77.0825 22.0918 76.8506 22.4863 cv
76.3374 23.3525 li
76.2671 23.4717 76.127 23.5439 75.9707 23.5439 cv
75.6377 23.5439 75.4614 23.3242 75.1499 22.5518 cv
74.9878 22.1406 74.7671 21.8105 74.5107 21.5869 cv
73.8364 21.0098 li
73.7358 20.9219 73.6768 20.8398 73.6768 20.7754 cv
73.6768 20.71 73.7344 20.6035 73.8364 20.4668 cv
73.9385 20.3359 74.0347 20.1875 74.1255 20.0195 cv
74.2246 19.8389 74.2769 19.707 74.2856 19.6309 cv
74.3169 19.3438 li
74.3418 19.25 74.4351 19.1846 74.5464 19.1846 cv
74.7593 19.1846 74.7959 19.3262 74.8008 20.1152 cv
74.8008 20.3174 74.8867 20.6123 75.0557 20.9795 cv
75.4072 21.749 li
75.4551 21.8486 75.5659 21.9111 75.6973 21.9111 cv
76.0313 21.9111 76.4507 21.1309 76.562 20.3066 cv
76.6538 19.624 76.7271 19.4063 76.8682 19.4063 cv
77.0005 19.4063 77.0586 19.4893 77.332 20.0498 cv
77.4165 20.2227 77.5479 20.3877 77.7163 20.5313 cv
77.8726 20.6621 78.0063 20.7422 78.0996 20.7568 cv
78.1348 20.7578 li
78.3994 20.7578 78.4878 20.5928 78.5498 19.9854 cv
78.5801 19.666 li
78.5166 19.2148 li
78.4731 18.9053 li
78.4731 18.6992 78.5449 18.5752 78.6631 18.5752 cv
78.7324 18.5752 78.8184 18.6201 78.9028 18.7031 cv
79.2227 19.0254 li
79.4355 19.2402 79.6538 19.3467 79.8682 19.3467 cv
80.1426 19.3467 80.313 19.2266 80.313 19.0313 cv
80.313 18.8701 80.2764 18.7939 79.9932 18.3193 cv
79.9639 18.2734 79.8896 18.1348 79.7686 17.9033 cv
79.4839 17.3623 79.3501 17.2285 79.0991 17.2285 cv
78.7739 17.2598 li
78.3569 17.4199 li
78.2334 17.4678 78.1475 17.4941 78.1025 17.4941 cv
78.0479 17.4941 78.0039 17.4385 78.0039 17.3643 cv
78.0039 17.0752 78.1938 16.6201 78.5498 16.0615 cv
78.769 15.7139 78.9541 14.8525 79.0928 13.5439 cv
79.2559 12.0381 li
79.3525 11.1133 79.4536 10.7852 79.6401 10.7852 cv
79.708 10.7852 79.7612 10.8145 79.7686 10.8535 cv
79.8633 11.333 li
79.8633 11.7178 li
79.8633 12.1855 79.9136 12.5645 79.9727 12.5645 cv
80.1089 12.5645 80.3081 12.4053 80.5044 12.1338 cv
80.6431 11.9395 80.7505 11.7246 80.8247 11.4932 cv
80.9307 11.1484 80.9863 10.8672 80.9863 10.6523 cv
80.9863 9.91113 80.6738 9.59277 79.6704 9.3125 cv
79.5693 9.2832 79.5024 9.25098 79.48 9.21582 cv
79.4458 8.92676 li
79.4458 8.38477 li
79.3804 7.99805 li
79.2559 7.67773 li
79.0928 7.32617 li
78.8379 7.48438 li
78.1831 7.89648 78.0239 8.01855 77.8096 8.28711 cv
77.5186 8.65625 77.418 8.74707 77.2969 8.74707 cv
77.2085 8.74707 77.1392 8.68555 77.1392 8.6084 cv
77.2666 8.06055 li
77.2778 7.96777 li
77.2778 7.26563 76.8833 6.58594 76.1772 6.07617 cv
75.9531 6.33203 li
75.7275 6.65234 li
75.3442 7.10156 li
75.1211 7.36328 74.9878 7.71875 74.9878 8.05273 cv
74.9912 8.1582 li
74.9951 8.26563 li
74.9951 8.51855 74.9561 8.60547 74.8374 8.60547 cv
74.7671 8.5752 li
74.5107 8.25586 li
74.1909 7.87109 li
73.6133 7.51758 li
73.3252 7.29492 li
73.0161 7.9668 73.0034 8.03809 73.0034 8.90039 cv
73.0044 9.16895 li
73.0044 9.45801 72.9092 9.63281 72.7549 9.63281 cv
72.6797 9.63281 72.5444 9.57813 72.3643 9.47363 cv
72.2197 9.39063 72.0479 9.34277 71.8877 9.34277 cv
71.4214 9.34277 71.0786 9.73828 71.0786 10.2793 cv
71.0786 10.8672 71.2051 11.2695 71.5942 11.9092 cv
71.8452 12.3252 72.1777 12.6621 72.3301 12.6621 cv
72.3477 12.6621 72.3896 12.3652 72.4287 11.9736 cv
72.3301 11.4297 li
72.3091 11.1846 li
72.3091 10.9785 72.3823 10.8496 72.5029 10.8496 cv
72.6831 10.8496 72.793 11.0488 72.9077 11.5879 cv
73.165 12.7754 li
73.4204 14.2813 li
73.4902 14.6865 73.6201 15.1162 73.8066 15.5625 cv
74.0586 16.167 74.2412 16.543 74.3496 16.6836 cv
74.7051 17.1416 74.7466 17.2031 74.7466 17.3047 cv
74.7466 17.3838 74.6812 17.4541 74.6069 17.4541 cv
74.5386 17.4541 74.4404 17.4199 74.3169 17.3584 cv
74.2061 17.3008 74.0801 17.2549 73.9336 17.2295 cv
73.6997 17.1943 li
73.1685 17.1943 73.0605 17.6211 73.0605 19.75 cv
73.0605 21.0771 73.3359 22.8467 73.6768 23.7041 cv
74.3496 25.4043 li
74.4565 25.6699 74.5127 25.9414 74.5127 26.2012 cv
74.5127 28.5449 71.3418 32.29 68.0044 33.8975 cv
66.7051 34.5205 66.3203 35.1719 66.2095 36.9424 cv
66.7651 36.6768 66.9883 36.5898 67.3315 36.4932 cv
68.2764 36.2285 68.4795 36.0938 68.6118 35.6582 cv
68.7402 35.2412 li
68.7974 35.0635 68.917 34.9756 69.5752 34.6328 cv
69.8218 34.5049 69.9985 34.3613 70.0879 34.2178 cv
70.2554 33.9414 70.3833 33.8047 70.4678 33.8047 cv
70.5605 33.8047 70.6084 33.8662 70.6084 33.9707 cv
70.6011 34.0215 li
70.2466 34.9375 li
70.2075 35.1631 li
70.2075 35.8359 70.5835 36.3945 71.2739 36.7471 cv
71.3184 36.5781 71.3496 36.4502 71.3687 36.3643 cv
71.4824 35.874 71.5918 35.5518 71.689 35.4033 cv
72.3003 34.5049 li
72.5195 34.1807 72.5601 33.9668 72.5601 33.1396 cv
72.5234 32.1318 li
72.5044 31.875 li
72.5044 31.708 72.5835 31.6182 72.7285 31.6182 cv
72.8394 31.6182 72.9326 31.6602 72.9404 31.7158 cv
73.0352 32.3252 li
73.0576 32.4551 73.1904 32.5508 73.3486 32.5508 cv
73.6592 32.5508 74.0557 32.1543 74.4795 31.4287 cv
74.6406 31.1455 74.7065 30.9248 74.7065 30.6631 cv
74.7065 30.46 74.665 30.0117 74.6055 29.667 cv
74.5918 29.4775 li
74.5918 29.3184 74.686 29.2178 74.8364 29.2178 cv
74.917 29.2178 74.98 29.2432 74.9912 29.2783 cv
75.2158 30.0186 li
75.2915 30.2646 75.4614 30.4355 75.6367 30.4355 cv
76.1284 30.4355 76.6377 29.4287 76.6904 28.3525 cv
76.7222 27.6758 76.8066 27.4404 77.0132 27.4404 cv
77.0928 27.4404 77.1543 27.4697 77.1719 27.5186 cv
77.2983 27.9355 li
77.3457 28.0879 77.438 28.1895 77.5283 28.1895 cv
77.6094 28.1895 77.772 28.0469 77.9736 27.8066 cv
78.0845 27.668 78.1831 27.5303 78.2622 27.3896 cv
78.3237 27.2764 78.3569 27.1621 78.3569 27.0518 cv
78.3569 26.8896 78.3237 26.8457 78.0684 26.6514 cv
77.834 26.4746 77.7163 26.248 77.7163 25.9795 cv
77.7163 25.5146 77.9131 25.0156 78.4839 24.0234 cv
79.0073 23.124 79.0776 23.0195 79.2051 23.0195 cv
79.3247 23.0195 79.418 23.1387 79.418 23.293 cv
79.418 23.3877 79.3931 23.4844 79.3501 23.5742 cv
79.2646 23.7617 79.2192 23.8887 79.2192 23.958 cv
79.2192 24.083 79.3335 24.1855 79.4736 24.1855 cv
79.6299 24.1855 79.8281 24.1182 80.0562 23.9932 cv
80.1934 23.916 80.4834 23.7969 80.9219 23.6396 cv
81.5171 23.4258 81.8809 23.2949 82.0107 23.2559 cv
82.2114 23.1924 82.4404 23.1572 82.6704 23.1572 cv
82.8555 23.1572 83.042 23.1797 83.229 23.2227 cv
83.5938 23.3086 83.8423 23.3535 83.9673 23.3535 cv
84.2583 23.3535 84.4844 23.1309 84.4844 22.8467 cv
84.4844 22.7188 84.397 22.4766 84.2861 22.292 cv
84.1211 22.0264 84.0244 21.8721 83.999 21.8457 cv
83.8574 21.6973 83.8022 21.6162 83.8022 21.5566 cv
83.8374 21.4268 li
83.877 21.3477 83.9458 21.2979 84.0176 21.2979 cv
84.271 21.2979 84.7666 21.8154 85.2139 22.5518 cv
87.7271 26.6553 88.9453 27.9521 90.793 28.5117 cv
92.7188 29.0957 93.1704 29.502 93.1704 30.6504 cv
93.1704 31.2588 92.8486 31.9951 92.1704 32.9326 cv
90.8887 34.7119 90.4375 35.7529 90.4375 36.9355 cv
90.4409 37.1992 li
90.5972 37.1318 90.7158 37.0781 90.793 37.0371 cv
91.0562 36.9053 91.2266 36.8271 91.3071 36.8125 cv
92.105 36.6533 li
92.3569 36.6025 92.5586 36.3027 92.5586 35.9805 cv
92.5547 35.917 li
92.4932 35.2109 li
92.4858 35.0996 li
92.4858 34.7021 92.6797 34.375 92.9194 34.375 cv
93.0088 34.375 93.1108 34.4561 93.165 34.5703 cv
93.6782 35.6582 li
93.8862 36.1035 94.1309 36.3145 94.7998 36.6201 cv
false sop
0 0 0 0 cmyk
f
68.5171 14.6328 mo
68.4849 15.1465 li
68.4756 15.459 li
68.4756 15.9795 68.5566 16.2041 68.752 16.2041 cv
68.9648 16.2041 69.2979 15.8066 69.4473 15.3701 cv
69.5386 15.0986 69.6113 14.7207 69.6113 14.502 cv
69.6113 14.3467 69.5713 14.2041 69.4473 13.8945 cv
69.3027 13.5439 69.1553 13.3818 68.9761 13.3818 cv
68.7012 13.3818 68.5742 13.7344 68.5171 14.6328 cv
f
66.3052 8.70313 mo
66.7554 9.15137 li
67.4106 9.80859 67.8604 11.1426 67.8604 12.4336 cv
67.8442 12.9658 li
67.7485 14.4717 li
67.7158 15.7324 li
67.7158 19.9199 68.9346 22.7764 70.7256 22.7764 cv
71.1748 22.7764 71.728 22.3623 72.1074 21.748 cv
72.1904 21.6152 72.2974 21.5166 72.3643 21.5166 cv
72.4639 21.5166 72.5156 21.6025 72.5234 21.7813 cv
72.5889 22.4863 li
72.6504 23.0938 li
72.6831 23.3799 72.7134 23.6045 72.7476 23.7686 cv
72.8105 24.0771 72.8447 24.2881 72.8447 24.3975 cv
72.8447 24.7197 72.7793 24.7549 72.0103 24.8584 cv
71.7227 24.8945 71.4165 25.0156 71.1138 25.2109 cv
70.6162 25.5303 70.3271 25.751 70.2808 25.8516 cv
69.9277 26.5908 li
69.8809 26.6855 69.8022 26.75 69.7236 26.75 cv
69.5356 26.75 69.2861 26.4658 68.9321 25.8516 cv
68.6069 25.2861 68.4619 24.96 68.4619 24.8076 cv
68.4619 24.7051 68.5415 24.6631 68.7402 24.6631 cv
68.8062 24.6641 li
69.1904 24.6963 li
69.478 24.6641 li
69.7363 24.6338 li
69.8472 24.6084 69.9277 24.5127 69.9277 24.3975 cv
69.9277 24.3203 69.876 24.248 69.7983 24.2178 cv
68.356 23.6064 li
68.0098 23.46 67.6392 23.0879 67.2998 22.5518 cv
66.9302 21.96 66.7148 21.4463 66.7148 21.1553 cv
66.7148 20.9268 66.813 20.7803 66.9658 20.7803 cv
67.0264 20.7803 67.1094 20.8018 67.2017 20.8525 cv
67.3618 20.9287 67.5093 20.9814 67.5771 20.9814 cv
67.6313 20.9814 67.6919 20.957 67.7485 20.916 cv
67.8101 20.8672 67.8457 20.8105 67.8457 20.7617 cv
67.8457 20.6699 67.7485 20.5498 67.5898 20.4326 cv
66.3896 19.582 65.6636 18.5508 65.6636 17.6992 cv
65.6636 17.4492 65.7207 17.335 65.8438 17.335 cv
66.0806 17.3574 li
66.2549 17.3936 66.4629 17.4229 66.5308 17.4229 cv
66.7061 17.4229 66.8247 17.3242 66.8247 17.1748 cv
66.8247 17.083 66.7061 16.9648 66.5298 16.8779 cv
65.7305 16.4785 65.5337 16.249 65.0234 15.1133 cv
64.6323 14.2422 64.4297 13.8799 64.0942 13.4473 cv
64.5127 13.2461 64.7397 13.1865 65.0903 13.1865 cv
65.5288 13.1865 65.8047 13.4727 66.1138 14.248 cv
66.3091 14.7383 66.521 15.0684 66.644 15.0684 cv
66.7012 15.0684 66.7266 14.9658 66.7266 14.6982 cv
66.7266 14.3809 66.6807 14.0557 66.5938 13.7373 cv
66.5156 13.4443 66.4805 13.2061 66.4995 13.0303 cv
66.4351 12.5811 li
66.0806 12.3887 li
65.7544 12.2129 65.5352 11.7891 65.5352 11.3379 cv
65.5352 11.1387 65.5557 10.9395 65.5991 10.7578 cv
65.6079 10.7188 65.6724 10.4746 65.7935 10.0176 cv
65.9321 9.49707 66.0205 8.95605 66.0205 8.66113 cv
66.0176 8.38477 li
66.3052 8.70313 li
cp
f
70.1509 31.8135 mo
69.4766 31.6992 69.3721 31.666 68.6143 31.334 cv
68.0889 31.1006 67.7485 31.0088 67.4106 31.0088 cv
66.9038 31.0088 66.5132 31.1689 66.0483 31.5576 cv
66.3354 31.7803 li
66.9785 32.2295 li
67.5898 32.71 li
67.7446 32.835 67.9351 32.9043 68.127 32.9043 cv
68.7559 32.9043 69.2852 32.6172 70.1509 31.8135 cv
f
82.4912 37.6475 mo
82.6704 37.249 82.752 37.1396 83.1328 36.8125 cv
84.0293 36.0439 84.4463 35.4736 84.4463 35.0186 cv
84.4463 34.6973 li
84.4463 34.3125 li
84.4463 33.9014 84.5142 33.7666 84.7285 33.7666 cv
84.8247 33.7666 84.9023 33.8037 84.9277 33.8643 cv
85.0879 34.2461 li
85.1245 34.3359 85.229 34.3896 85.3589 34.3896 cv
85.5869 34.3896 85.75 34.2256 86.1455 33.5752 cv
86.313 33.2998 86.3799 33.1221 86.3799 32.9404 cv
86.3799 32.8262 86.3545 32.7051 86.3042 32.5801 cv
86.2803 32.5195 86.2061 32.3506 86.0801 32.0693 cv
86.0078 31.9043 85.9487 31.6836 85.9487 31.5674 cv
85.9487 31.3574 86.0557 31.2334 86.2363 31.2334 cv
86.333 31.2334 86.4175 31.2705 86.4678 31.334 cv
86.7212 31.6514 li
86.7793 31.7207 86.7935 31.7637 86.8906 31.7637 cv
87.0088 31.7637 87.2192 31.6514 87.2998 31.4932 cv
87.5562 30.9795 li
87.6211 30.8525 87.6543 30.75 87.6543 30.6885 cv
87.6543 30.5801 87.5522 30.4707 87.3945 30.4033 cv
86.9458 30.209 li
86.4204 29.9844 85.9839 29.0811 85.9839 28.2227 cv
85.9839 28.126 86.0181 27.9854 86.0801 27.8066 cv
86.2739 27.2607 li
86.3379 27.082 86.3696 26.9004 86.3696 26.7285 cv
86.3696 26.4131 86.2729 26.1104 86.0498 25.7549 cv
85.8291 25.3955 85.6992 25.1729 85.6641 25.082 cv
85.4795 24.6045 85.3677 24.4473 85.21 24.4473 cv
85.0967 24.4473 84.9897 24.4883 84.7993 24.5996 cv
84.479 24.7939 li
84.0293 25.3086 li
83.5791 25.5303 li
83.3115 25.666 83.0562 26.2461 83.0562 26.7295 cv
83.0562 27.4219 83.2085 27.7979 84.2534 29.667 cv
84.6968 30.458 84.9053 31.0439 84.9053 31.4912 cv
84.9053 32.7959 83.5742 33.8701 81.4009 34.3125 cv
78.8042 34.8457 78.2383 35.2734 77.9395 36.9424 cv
78.3887 36.71 78.5674 36.6768 79.3599 36.6768 cv
79.8301 36.6826 li
79.9048 36.6836 li
80.3335 36.6836 80.3911 36.6543 80.6646 36.2666 cv
80.9785 35.8232 81.291 35.5596 81.7227 35.373 cv
82.2354 35.1465 li
82.6514 34.9219 li
82.7798 34.8887 li
82.896 34.8887 82.9575 34.9355 82.9575 35.0225 cv
82.9575 35.1328 82.853 35.3164 82.6514 35.5635 cv
82.3413 35.9395 82.1621 36.3262 82.1621 36.6201 cv
82.1621 37.0488 82.2329 37.2646 82.4912 37.6475 cv
f
78.4526 32.6787 mo
78.8223 32.9092 79.1948 33.2422 79.4141 33.5439 cv
79.7207 33.9619 79.7632 33.9941 80.0688 33.9941 cv
80.1948 33.9941 80.355 33.9717 80.5361 33.9268 cv
80.8247 33.8643 li
81.3706 33.7607 81.5356 33.6816 81.5356 33.5361 cv
81.5356 33.4473 81.4854 33.3584 81.4009 33.2871 cv
81.0166 32.9678 li
80.6646 32.6455 li
80.4468 32.4492 79.999 32.29 79.6538 32.29 cv
79.2559 32.29 78.9302 32.3955 78.4526 32.6787 cv
f
88.8364 34.4102 mo
89.0278 34.376 li
89.3506 34.3447 li
89.6069 34.376 li
89.7808 34.3867 li
90.106 34.3867 90.2734 34.3516 90.4082 34.2461 cv
90.6074 34.0967 90.8096 33.8545 91.0186 33.5098 cv
91.1016 33.3721 91.1445 33.2471 91.1445 33.1465 cv
91.1445 32.9307 90.9463 32.8047 90.5962 32.8047 cv
89.7163 32.8047 89.1768 33.2959 88.8364 34.4102 cv
f
76.8823 12.2637 mo
76.9185 12.5615 77.0737 12.8057 77.2314 12.8057 cv
77.3672 12.8057 77.5791 12.3457 77.9131 11.7832 cv
78.3667 11.0098 78.7427 10.3672 78.7427 9.95703 cv
78.7427 9.82227 78.6729 9.7168 78.5835 9.7168 cv
78.5483 9.72754 li
78.1968 10.0518 li
77.9912 10.2383 77.5488 10.4785 77.1392 10.627 cv
76.731 10.7734 76.6108 10.8984 76.6108 11.1709 cv
76.6577 11.4297 li
76.9238 11.9834 li
76.8823 12.2637 li
cp
true sop
0 .13 .49 .98 nzopmsc
f
74.0635 9.8916 mo
73.9512 9.79883 73.791 9.72754 73.7056 9.72754 cv
73.5693 9.72754 73.5117 9.79785 73.5117 9.95898 cv
73.519 10.0518 li
73.5444 10.2285 73.5884 10.4102 73.645 10.5947 cv
73.8037 11.1035 73.9917 11.4102 74.0664 11.4912 cv
74.5503 12.3018 li
74.7744 12.5586 75.1147 12.7031 75.2471 12.7432 cv
75.27 12.7461 li
75.3569 12.7461 75.4272 12.6914 75.4375 12.6152 cv
75.5371 11.9736 li
75.6958 11.3945 li
75.7148 11.2598 li
75.7148 11.1035 75.6255 10.9648 75.4727 10.8848 cv
74.9268 10.5947 li
74.0635 9.8916 li
cp
f
76.1763 13.9619 mo
76.0063 13.9629 li
75.6328 13.9297 li
75.6201 13.9248 75.4902 13.8467 75.2461 13.7021 cv
75.1025 13.6172 74.9473 13.5742 74.7959 13.5742 cv
74.502 13.5742 74.3257 13.7559 74.3257 14.0654 cv
74.3257 14.3066 74.4692 14.7715 74.7339 15.4023 cv
74.8491 15.6719 74.9878 16.0137 75.1514 16.4268 cv
75.5029 17.3232 75.8696 17.709 76.3525 17.709 cv
76.7671 17.709 77.1016 17.3682 77.3623 16.6865 cv
77.7163 15.2422 li
77.8867 14.793 78.3101 14.6055 78.3101 14.29 cv
78.3101 13.9219 77.8989 13.5693 77.5488 13.5693 cv
77.3623 13.6055 li
76.8823 13.9297 li
76.1763 13.9619 li
cp
f
76.146 14.8574 mo
75.7603 14.8574 li
75.7021 14.8574 75.6431 14.8926 75.6001 14.9531 cv
75.5371 15.043 75.5029 15.1025 75.5029 15.1133 cv
75.6631 15.8838 li
75.792 16.5547 li
75.8647 16.9248 75.9253 17.0693 76.2012 17.0693 cv
76.5156 17.0693 76.7837 16.8545 76.8174 16.46 cv
76.8823 15.7539 li
76.9263 15.2861 76.9463 15.04 76.9463 15.0225 cv
76.9463 14.9531 76.9111 14.8828 76.8521 14.8262 cv
76.8037 14.7822 76.7456 14.7568 76.6865 14.7568 cv
76.6577 14.7607 li
76.146 14.8574 li
cp
false sop
0 0 0 0 cmyk
f
32.4282 83.0938 mo
32.708 83.7998 32.8027 84.1484 32.8442 84.6035 cv
32.9072 85.9473 li
32.959 87.2959 33.4053 87.9658 34.2534 87.9658 cv
34.561 87.9658 34.8154 87.8857 34.959 87.7422 cv
35.312 87.3906 li
35.4521 87.3496 li
35.6768 87.3496 35.7998 87.4961 35.7998 87.7666 cv
35.7612 88.2881 li
35.7358 88.5215 35.7773 89.0186 35.8896 89.7598 cv
35.9551 90.1963 35.9863 90.6279 35.9863 91.0537 cv
35.9863 91.7383 35.9375 92 35.6963 92.6152 cv
35.9194 93.2451 36.0493 93.9561 36.0493 94.5508 cv
36.0493 95.248 35.9351 95.7168 35.665 96.1094 cv
35.7925 96.6602 35.8252 96.8828 35.8252 97.1982 cv
35.8252 97.5146 35.7813 97.9229 35.6963 98.418 cv
35.582 99.085 35.5391 99.6025 35.5669 99.9521 cv
35.5708 100.035 li
35.5708 100.237 35.5103 100.337 35.3857 100.337 cv
35.2656 100.337 35.1191 100.242 34.9907 100.082 cv
34.7954 99.8311 34.6694 99.7402 34.5205 99.7402 cv
34.3003 99.7402 34.2305 99.8574 33.9004 100.818 cv
33.7998 101.116 33.54 101.518 33.1328 102.007 cv
32.814 102.388 32.6147 102.703 32.5557 102.937 cv
32.4536 103.32 32.3892 103.543 32.3643 103.609 cv
32.3271 103.694 32.2529 103.759 32.1699 103.768 cv
32.1294 103.771 li
31.6011 103.771 30.9966 102.639 30.376 100.501 cv
30.2021 99.8955 29.978 99.627 29.6514 99.627 cv
29.4204 99.627 29.1826 99.7813 29.0933 99.9873 cv
28.9014 100.437 li
28.8672 100.513 28.8018 100.565 28.7324 100.565 cv
28.4766 100.565 28.0859 100.098 27.8438 99.5059 cv
27.6445 99.0166 27.5313 98.4854 27.5313 98.0313 cv
27.5313 97.0273 28.271 96.2783 30.5034 95.0176 cv
31.4766 94.4717 31.8521 93.7754 31.8521 92.5205 cv
31.8521 91.5264 31.5532 90.9561 30.6978 90.3066 cv
30.0205 89.7949 29.6299 89.5996 29.2695 89.5996 cv
28.9658 89.5996 28.7261 89.8027 28.7261 90.0596 cv
28.7261 90.3604 28.9014 90.5439 29.3198 90.6885 cv
29.8115 90.8652 30.0269 91.0391 30.0269 91.2607 cv
30.0269 91.4639 29.8179 91.9014 29.48 92.4209 cv
29.1167 92.9756 28.9595 93.1367 28.4541 93.4805 cv
28.3013 94.3623 27.8867 94.9258 26.915 95.5635 cv
26.7197 96.1162 26.6113 96.3125 26.2734 96.749 cv
25.6001 97.6162 li
25.3896 97.8838 25.1543 98.3721 25.1201 98.6094 cv
25.0493 99.0967 25.0029 99.1855 24.8159 99.1855 cv
24.5615 99.1855 24.0386 98.7334 23.5166 98.0645 cv
23.2065 97.665 23.1318 97.4805 23.1006 97.0049 cv
22.7651 97.2686 22.6621 97.3027 22.0103 97.3877 cv
21.6196 97.4434 21.3271 97.5156 21.1455 97.6162 cv
20.6514 97.874 20.4937 97.9443 20.4033 97.9443 cv
20.2705 97.9443 20.2256 97.874 20.2153 97.6475 cv
20.1826 96.9395 li
20.1826 95.9727 20.5645 94.8418 21.1455 94.0889 cv
20.5845 93.6016 20.0239 93.3057 19.5752 93.2549 cv
19.3848 93.2344 19.3354 93.21 19.3354 93.1406 cv
19.3354 93.0225 19.4604 92.7715 19.6382 92.5488 cv
19.8774 92.2471 20.0703 92.0332 20.2153 91.9092 cv
20.6704 91.5205 21.457 91.2354 22.0747 91.2354 cv
22.4917 91.2354 23.1055 91.3887 23.9009 91.6855 cv
24.186 91.7939 24.4443 91.8447 24.666 91.8447 cv
25.019 91.8447 25.2183 91.6162 25.2183 91.2129 cv
25.2183 90.6309 24.9321 89.7197 24.2842 88.2539 cv
23.8477 87.2627 23.6514 86.5977 23.6514 86.1396 cv
23.6514 85.0283 24.1758 83.875 24.8311 83.5449 cv
24.521 83.3887 24.3838 83.3496 24.1167 83.3496 cv
23.7964 83.3496 23.543 83.4316 23.1309 83.6729 cv
22.6558 83.9492 22.3921 84.1934 22.3921 84.3564 cv
22.3921 84.4189 22.4907 84.5186 22.6519 84.6348 cv
22.9014 84.8086 22.9429 84.873 22.9429 85.1084 cv
22.9429 85.8994 22.2876 86.958 21.3701 87.6475 cv
21.1685 88.7695 20.6504 89.4482 19.6382 89.9229 cv
19.5059 90.5332 19.4224 90.71 18.9336 91.3984 cv
18.0967 92.5723 17.9009 92.9453 17.7485 93.6094 cv
17.6689 93.9531 17.5908 94.0967 17.4839 94.0967 cv
17.3477 94.0967 17.0654 93.8828 16.7554 93.5449 cv
16.4854 93.251 16.3164 93.0498 16.2422 92.9316 cv
16.105 92.7217 16.0356 92.5166 15.8906 91.9092 cv
15.6572 91.9746 15.5957 91.9863 15.4316 91.9863 cv
14.9604 91.9736 li
14.6401 91.9648 li
13.938 91.9648 13.1934 92.124 12.8125 92.3564 cv
12.6738 92.4424 12.5791 92.4854 12.5337 92.4854 cv
12.3271 92.4854 12.1592 92.0508 12.1592 91.5137 cv
12.1592 90.3574 12.4795 89.3994 13.23 88.3525 cv
12.9546 88.123 12.8643 88.0361 12.6196 87.7764 cv
12.5137 87.6582 12.4277 87.583 12.3638 87.5498 cv
12.0117 87.3574 li
11.8896 87.293 11.8179 87.2119 11.8179 87.1484 cv
11.8179 86.9785 12.2871 86.5313 12.8438 86.1719 cv
13.46 85.7744 13.9482 85.5938 14.396 85.5938 cv
14.9209 85.5938 15.2012 85.7285 15.8564 86.2998 cv
16.3115 86.6973 16.6216 86.8779 16.8423 86.8779 cv
16.9976 86.8779 17.1675 86.7705 17.2983 86.5869 cv
17.4058 86.4395 17.4639 86.2754 17.4639 86.1104 cv
17.4639 85.4971 16.7314 84.4629 15.9209 83.9277 cv
15.3169 83.5313 14.6553 83.3184 14.0112 83.3184 cv
13.1187 83.3184 12.3525 83.7627 12.0117 84.4736 cv
11.6577 85.2109 li
11.5747 85.3828 11.4712 85.4717 11.353 85.4717 cv
11.1475 85.4717 11.0391 85.3789 10.3115 84.5381 cv
9.47998 83.5742 li
9.22266 83.2793 9.0498 82.9951 8.96533 82.7441 cv
8.88965 82.5068 8.83691 82.3643 8.80518 82.3271 cv
8.77637 82.2842 8.6665 82.1982 8.48633 82.0684 cv
7.84375 81.6133 7.37451 80.7119 7.10645 79.4102 cv
7.08594 79.3164 7.05566 79.1758 7.01025 78.9941 cv
6.2251 78.0313 5.75732 76.8398 5.75732 75.8066 cv
5.75732 75.6689 5.76514 75.6074 5.82715 75.3691 cv
5.36914 74.9092 5.31787 74.7998 4.95996 73.5723 cv
4.70361 72.7012 4.54102 72.3301 4.22217 71.9102 cv
4.1377 71.7969 4.09375 71.71 4.09375 71.6611 cv
4.09375 71.4883 4.3623 71.3447 4.83105 71.2676 cv
5.26953 71.1953 5.29736 71.1934 5.4751 71.1934 cv
6.11426 71.2363 li
6.07373 70.3584 li
6.07373 69.8428 6.11426 69.5078 6.24316 68.8965 cv
6.30469 68.5908 6.33838 68.3682 6.33838 68.2275 cv
6.33838 68.1709 6.31689 67.9854 6.27295 67.6768 cv
6.23926 67.4404 6.2085 67.2783 6.17822 67.1973 cv
6.13086 67.0771 6.10938 66.9854 6.10938 66.9258 cv
6.10938 66.8213 6.17822 66.7666 6.30078 66.7666 cv
6.39258 66.7666 6.52393 66.8115 6.72314 66.9072 cv
7.28027 67.1816 7.7417 67.4619 8.09961 67.7412 cv
9.20459 68.6074 10.0737 69.9385 10.0737 70.7637 cv
10.0571 71.0146 li
10.0127 71.2998 9.99121 71.459 9.99121 71.4834 cv
9.99121 71.624 10.0708 71.8076 10.2158 72.0029 cv
10.5688 72.4863 li
10.8813 72.9121 11.0845 73.4102 11.0845 73.7432 cv
11.0845 74.043 11.0215 74.1748 10.5059 74.9229 cv
10.1177 75.4824 9.95752 75.8994 9.95752 76.3564 cv
9.95752 76.9346 10.188 77.6631 10.6016 78.3848 cv
10.9785 79.0488 11.4146 79.4141 11.833 79.4141 cv
12.5488 79.4141 12.8594 78.7813 12.9722 77.0684 cv
13.0303 76.1777 13.1177 75.376 13.23 74.6348 cv
13.2622 74.1963 li
13.2622 73.9961 13.2007 73.8799 12.9424 73.5723 cv
11.978 72.4541 li
11.0615 71.3838 10.7856 70.833 10.7856 70.0635 cv
10.7856 69.1826 11.3643 68.5723 12.2036 68.5723 cv
12.5879 68.6074 li
12.584 68.3574 li
12.584 68.1533 12.6387 67.8623 12.748 67.4863 cv
12.9487 66.7979 13.2031 66.2695 13.3354 66.2695 cv
13.3784 66.2695 13.4844 66.3213 13.6455 66.4297 cv
13.6958 66.4609 13.8901 66.5371 14.2241 66.6523 cv
14.4028 66.7178 14.5293 66.7813 14.8618 66.9707 cv
15.0171 66.4209 15.1318 66.166 15.3765 65.8506 cv
15.79 65.3164 16.2603 64.8896 16.4263 64.8896 cv
16.5259 64.8896 16.7124 65.0264 16.9453 65.2744 cv
17.5557 65.917 li
17.6563 66.0205 17.7764 66.2295 17.9087 66.5244 cv
18.0371 66.8115 li
18.207 66.7139 18.3345 66.6396 18.4214 66.5898 cv
18.6699 66.4395 18.8438 66.3428 18.9336 66.3008 cv
19.3242 66.1152 19.5273 66.0195 19.5435 66.0117 cv
19.7085 65.9043 19.8232 65.8467 19.8726 65.8467 cv
19.9795 65.8467 20.04 66.0391 20.2798 67.1006 cv
20.4434 67.8271 20.4663 67.9814 20.5054 68.5127 cv
21.5288 68.6563 22.0103 69.2432 22.0103 70.3418 cv
22.0103 71.376 21.5034 72.4023 20.4092 73.5723 cv
20.1104 73.8945 20.0386 74.0459 20.0386 74.3457 cv
20.0386 77.1787 21.0249 78.0742 24.5767 78.4482 cv
26.7559 78.6768 27.4038 78.8154 30.0234 79.6035 cv
31.4023 80.0146 32.1938 80.1865 32.7046 80.1865 cv
33.3081 80.1865 33.6484 79.9658 33.6484 79.5762 cv
33.6484 78.9814 33.2188 78.7949 30.666 78.2549 cv
24.7275 77.0049 22.3945 74.9766 22.3945 71.0586 cv
22.3945 68.2656 24.4834 66.1699 27.2715 66.1699 cv
28.5005 66.1699 29.5996 66.5449 31.3379 67.5469 cv
32.9502 68.4824 33.2842 68.6416 33.6533 68.6416 cv
34.0845 68.6416 34.2549 68.3652 34.2549 67.6709 cv
34.2549 67.2227 34.3906 67.0029 34.6709 67.0029 cv
34.9263 67.0029 35.3159 67.2676 35.665 67.6768 cv
36.1968 68.3066 36.4023 68.6279 36.4023 69.4971 cv
36.4023 70.6572 35.7847 71.415 34.5762 71.75 cv
34.4463 71.8916 34.3506 71.9951 34.2886 72.0684 cv
33.6294 72.8135 33.0483 73.0615 31.9985 73.0615 cv
31.0869 73.0615 29.9414 72.6895 29.1572 72.1318 cv
27.6191 71.0439 li
26.9551 70.5723 26.4697 70.3721 26.0049 70.3721 cv
25.3491 70.3721 24.9575 70.7637 24.9575 71.4209 cv
24.9575 72.0654 25.3833 72.5898 26.0806 72.8057 cv
27.5249 73.2559 li
28.0352 73.417 28.2788 73.5156 28.9014 73.832 cv
29.2583 73.7803 29.4219 73.7637 29.6201 73.7637 cv
30.5161 73.7637 31.4829 74.0049 32.3301 74.4385 cv
32.5996 74.5771 32.7939 74.665 32.9072 74.6982 cv
33.7104 74.9229 li
35.5303 75.4326 37.0137 77.4678 37.0137 79.4561 cv
37.0137 81.7236 35.5439 83.1289 33.1694 83.1289 cv
32.4282 83.0938 li
cp
true sop
0 .13 .49 .98 nzopmsc
f
31.8823 102.135 mo
32.0742 101.748 li
32.5244 101.267 li
32.9033 100.861 33.1074 100.285 33.1074 99.6104 cv
33.1074 99.2803 33.0498 98.9238 32.9404 98.5742 cv
32.8594 98.3184 32.8076 98.0996 32.8076 98.0088 cv
32.8076 97.8057 32.959 97.6143 33.1143 97.6143 cv
33.1782 97.6143 33.2651 97.6709 33.356 97.7754 cv
33.8359 98.3184 li
34.1348 98.6553 34.2344 98.7178 34.6064 98.7998 cv
34.6392 98.3516 li
34.6709 97.8252 li
34.6709 97.0596 34.3906 96.2002 33.9648 95.6582 cv
33.7104 95.334 33.5942 95.1338 33.5942 95.0205 cv
33.5942 94.9023 33.6787 94.793 33.7681 94.793 cv
33.7998 94.793 33.8462 94.8174 33.9004 94.8574 cv
34.2095 95.0879 34.3691 95.1826 34.4536 95.1826 cv
34.6089 95.1826 34.7485 94.7959 34.7485 94.373 cv
34.7485 93.7656 34.4941 93.0664 34.0947 92.582 cv
33.8892 92.334 33.7603 92.1748 33.7104 92.1025 cv
33.666 92.041 33.646 91.9805 33.646 91.9189 cv
33.646 91.7813 33.7583 91.6836 33.9233 91.6836 cv
34.0444 91.6836 34.1187 91.7148 34.3188 91.8447 cv
34.4136 91.9063 34.5005 91.9404 34.5649 91.9404 cv
34.8145 91.9404 34.9048 91.5889 34.9048 90.6367 cv
34.895 90.2422 li
34.8623 89.6641 li
34.8257 88.9863 34.7661 88.8662 34.479 88.8662 cv
34.2231 88.8662 li
32.6592 88.8662 31.9316 87.876 31.5283 85.209 cv
31.2383 83.2822 30.5186 81.9131 29.6377 81.6182 cv
29.1108 81.4434 28.9219 81.3281 28.9219 81.1885 cv
28.9219 81.0996 29.0679 81.0117 29.2266 81.0117 cv
29.3413 81.0117 29.6123 81.083 29.8315 81.1729 cv
31.1084 81.6885 32.1875 81.9414 33.1255 81.9414 cv
34.6606 81.9414 35.8721 80.8115 35.8721 79.3779 cv
35.8721 78.2832 35.3511 77.1689 34.4136 76.2686 cv
34.1587 76.0186 33.8813 75.8564 33.6128 75.7871 cv
33.5513 75.7822 li
33.3887 75.8359 li
33.4546 76.2988 li
33.5806 76.6221 li
33.6157 76.7559 li
33.6157 76.8242 33.5498 76.8779 33.4644 76.8779 cv
33.3701 76.8779 33.2827 76.8291 33.2285 76.748 cv
32.6523 75.8818 li
32.1953 75.1982 31.1929 74.627 30.4507 74.627 cv
30.187 74.627 30.0205 74.7441 30.0205 74.9307 cv
30.0205 75.0215 30.1079 75.1865 30.2158 75.3057 cv
30.3789 75.4912 30.5073 75.7129 30.5073 75.8174 cv
30.4717 75.9463 li
30.438 76.0186 30.3911 76.0684 30.3438 76.0742 cv
30.312 76.0771 li
30.1567 76.0771 30.0811 76.0068 29.3828 75.2109 cv
28.812 74.5576 27.646 73.9229 27.0205 73.9229 cv
26.9312 73.9229 26.8481 73.9619 26.7852 74.0244 cv
26.7461 74.0664 26.7207 74.1133 26.7207 74.1475 cv
26.7207 74.2461 26.8052 74.373 26.9463 74.5049 cv
27.1445 74.6875 27.3027 74.9033 27.3027 74.9961 cv
27.3027 75.0596 27.2188 75.1162 27.1226 75.1162 cv
26.9399 75.1162 26.5278 74.8506 25.7603 74.248 cv
24.564 73.3096 24.0308 72.4219 24.0308 71.3945 cv
24.0308 70.1543 24.9146 69.1826 26.0488 69.1826 cv
26.7129 69.1826 27.5942 69.502 28.1968 69.9541 cv
29.7676 71.1377 li
30.4858 71.6846 31.3672 71.9736 32.2896 71.9736 cv
32.4902 71.9736 32.6792 71.9287 32.8442 71.8438 cv
32.9844 71.7734 33.0698 71.6895 33.0698 71.6289 cv
33.0698 71.5908 32.9502 71.5342 32.7798 71.4902 cv
32.2129 71.3555 31.7563 71.1592 31.4336 70.9141 cv
29.8315 69.6982 li
29.2368 69.2461 28.8208 68.957 28.5801 68.832 cv
27.7354 68.3877 27.5703 68.2832 27.5703 68.1855 cv
27.5703 68.1357 27.6509 68.0938 27.7539 68.0938 cv
27.8398 68.0938 27.936 68.1152 28.0352 68.1582 cv
28.8696 68.5127 li
29.1372 68.624 29.5869 68.8926 30.2158 69.3135 cv
31.9316 70.46 32.8037 70.8271 33.811 70.8271 cv
34.769 70.8271 35.4761 70.1475 35.4761 69.2236 cv
35.4761 69.042 35.4297 68.8408 35.3423 68.6699 cv
35.1821 68.3516 li
35.126 68.2373 35.0225 68.1514 34.9907 68.1904 cv
34.895 68.3184 li
34.7993 68.9932 li
34.7954 69.0186 34.7612 69.0967 34.7012 69.2178 cv
34.6406 69.3438 34.5649 69.4531 34.479 69.5371 cv
34.3042 69.708 34.1587 69.7637 33.8901 69.7637 cv
33.395 69.7637 32.8379 69.498 31.3379 68.542 cv
29.8203 67.5762 28.4502 67.0713 27.3638 67.0713 cv
25.0571 67.0713 23.1968 68.9287 23.1968 71.2295 cv
23.1968 74.4385 25.1543 75.8887 31.3037 77.2295 cv
33.6436 77.7383 34.6709 78.4238 34.6709 79.4639 cv
34.6709 80.4141 33.9043 81.0117 32.6855 81.0117 cv
32.3174 81.0117 32.0273 80.9902 31.8184 80.9482 cv
31.6113 80.9053 30.5107 80.6064 28.5156 80.0479 cv
27.1406 79.667 25.5986 79.4512 24.2378 79.4512 cv
21.8252 79.4512 20.2002 80.168 19.0938 81.7168 cv
18.9648 81.9004 18.8379 82.0078 18.7529 82.0078 cv
18.6875 82.0078 18.5918 81.9629 18.4844 81.8779 cv
18.0371 81.5244 li
17.7207 81.2773 17.2207 81.0859 16.8862 81.0859 cv
16.6431 81.0859 16.4126 81.1826 16.208 81.3662 cv
16.0493 81.5107 15.9307 81.5879 15.8818 81.5879 cv
15.7017 81.5879 15.3726 81.1855 15.1206 80.6602 cv
14.7607 79.9092 14.5732 79.1621 14.5732 78.4785 cv
14.5732 78.1582 14.6743 77.9355 14.8154 77.9355 cv
14.9263 77.9355 15.0107 78.0205 15.0562 78.1904 cv
15.312 79.1201 li
15.4556 79.6406 15.7456 80.0498 15.9663 80.0498 cv
16.0645 80.0498 16.2373 79.9092 16.4326 79.666 cv
16.5522 79.5195 16.6377 79.3672 16.6909 79.2158 cv
16.8916 78.6289 16.9404 78.5439 17.0981 78.5439 cv
17.2856 78.5439 17.3818 78.6592 17.5078 79.2461 cv
17.5332 79.3545 17.5684 79.5166 17.7173 79.7959 cv
17.8472 80.0381 17.9766 80.2344 18.1016 80.3721 cv
18.1973 80.4766 18.3184 80.5361 18.4331 80.5361 cv
18.7144 80.5361 18.9736 80.0654 18.9736 79.5469 cv
18.9678 79.4102 li
18.9287 78.8154 li
18.9287 78.585 18.9648 78.5156 19.0938 78.5156 cv
19.1694 78.5156 19.2271 78.5557 19.3179 78.6719 cv
19.4556 78.8486 19.6406 79.002 19.8638 79.1201 cv
20.0591 79.2266 20.2153 79.2813 20.3198 79.2813 cv
20.4131 79.2813 20.5244 79.2217 20.6313 79.1201 cv
20.7183 79.0391 20.7661 78.9482 20.7661 78.8691 cv
20.7661 78.7744 20.6514 78.6289 20.311 78.2881 cv
20.1299 78.1035 19.9102 77.665 19.6699 77.0078 cv
19.5801 76.7559 19.459 76.585 19.3682 76.585 cv
19.3433 76.585 19.27 76.6084 19.1577 76.6533 cv
18.7417 76.8115 li
18.4531 76.9395 li
18.3438 76.9629 li
18.207 76.9629 18.0977 76.8652 18.0977 76.7432 cv
18.0977 76.6191 18.3887 76.2744 18.7417 75.9814 cv
18.9951 75.7686 19.1479 75.4531 19.1577 75.1162 cv
19.1782 74.5771 19.2773 74.1523 19.3818 74.1523 cv
19.479 73.0313 li
19.5244 72.4688 19.7578 71.4053 19.9595 70.8223 cv
19.9985 70.7041 20.0503 70.625 20.0879 70.625 cv
20.1772 70.625 20.2578 70.8672 20.2578 71.1338 cv
20.248 71.2998 li
20.2295 71.624 li
20.2295 72.0303 20.2949 72.2402 20.4209 72.2402 cv
20.5605 72.2402 20.7183 72.0381 20.8584 71.6846 cv
21.1455 70.9482 li
21.23 70.7305 21.2744 70.5283 21.2744 70.3496 cv
21.2744 69.7266 20.9009 69.2734 20.3828 69.2734 cv
20.1509 69.3135 li
20.0278 69.3564 19.9507 69.3779 19.9243 69.3779 cv
19.7554 69.3779 19.6138 69.1924 19.6138 68.9746 cv
19.6382 68.5127 li
19.6079 67.8711 li
19.479 67.1992 li
19.4453 66.877 li
19.1577 67.0361 li
18.8037 67.3252 li
18.293 67.7402 li
17.8755 68.0938 li
17.8018 68.1572 17.7183 68.1924 17.6377 68.1924 cv
17.3931 68.1924 17.3628 68.126 17.3628 67.627 cv
17.3628 67.502 li
17.3628 67.0977 17.1875 66.7822 16.5308 66.0117 cv
16.4932 65.9668 16.4399 65.9063 16.3682 65.8193 cv
16.2422 66.0449 li
15.8892 66.6211 li
15.5366 67.5176 li
15.4707 68.0938 li
15.4546 68.2588 15.3901 68.3877 15.3262 68.3877 cv
15.2603 68.3877 15.1494 68.3037 15.0244 68.1582 cv
14.5347 67.5977 14.3794 67.4961 13.6455 67.2305 cv
13.5825 67.4531 li
13.4653 67.833 13.4009 68.0576 13.3896 68.1289 cv
13.3555 68.7363 li
13.3555 68.9922 li
13.3584 69.1963 li
13.3584 69.373 13.293 69.4775 13.1846 69.4775 cv
13.1641 69.4727 li
13.1528 69.4688 13.0884 69.4131 12.9722 69.3135 cv
12.8984 69.2461 12.7617 69.2139 12.584 69.2139 cv
11.9883 69.2139 11.6074 69.5371 11.6074 70.0498 cv
11.6074 70.4336 11.7383 70.7197 12.3296 71.6191 cv
12.5918 72.0186 12.8945 72.332 13.0142 72.332 cv
13.0933 72.332 13.1592 72.1211 13.1592 71.876 cv
13.1001 71.4902 li
13.0391 71.3066 13.0088 71.1396 13.0088 71 cv
13.0088 70.8223 13.0605 70.7236 13.1592 70.7236 cv
13.4478 70.7236 13.7451 71.5547 13.8701 72.7109 cv
13.9961 73.8965 li
14.0439 74.3184 14.1738 74.751 14.3818 75.1787 cv
14.6743 75.7764 14.9604 76.1836 15.2148 76.3633 cv
15.5225 76.5791 15.7114 76.792 15.7114 76.9102 cv
15.7114 77.0098 15.6299 77.1025 15.5425 77.1025 cv
15.5327 77.1025 15.3145 77.0244 14.8945 76.875 cv
14.625 76.8369 li
13.9849 76.8369 13.7705 77.2031 13.7705 78.3047 cv
13.7705 79.6387 14.6694 81.5566 15.665 82.3574 cv
17.1382 83.5449 li
17.8872 84.1436 18.4531 85.1416 18.4531 85.8535 cv
18.4531 86.791 17.4258 87.7119 15.665 88.3525 cv
14.6064 88.7344 li
13.7856 89.0342 13.4551 89.5645 13.1323 91.1064 cv
13.5513 90.9775 13.7354 90.9443 14.0161 90.9443 cv
14.1587 90.9482 li
14.6348 90.958 li
15.0649 90.958 15.3765 90.6992 15.3765 90.3389 cv
15.3765 90.0498 li
15.3765 89.9629 15.4961 89.8447 15.665 89.7598 cv
15.9521 89.6201 16.1025 89.5469 16.1123 89.5361 cv
16.4668 89.248 li
16.522 89.2031 16.585 89.1758 16.6455 89.1758 cv
16.7412 89.1758 16.8208 89.2686 16.8208 89.375 cv
16.8208 89.4541 16.7969 89.5547 16.7554 89.6641 cv
16.6455 89.9473 16.585 90.334 16.585 90.7656 cv
16.585 91.5508 16.71 91.9736 17.1069 92.5488 cv
17.1436 92.3359 17.1763 92.1982 17.2031 92.1328 cv
17.2681 91.9707 17.4521 91.6807 17.7485 91.2686 cv
18.2324 90.5898 18.5894 89.7627 18.5894 89.3174 cv
18.5796 89.1816 li
18.4844 88.4463 li
18.4844 88.3125 18.5439 88.1875 18.6445 88.0938 cv
18.7144 88.0332 18.792 88 18.8638 88 cv
19.0005 88 19.085 88.0811 19.1919 88.3184 cv
19.2676 88.4971 19.3584 88.6064 19.4199 88.6064 cv
19.5322 88.6064 19.7524 88.3125 19.894 87.9658 cv
20.001 87.7119 20.0552 87.4824 20.0552 87.2881 cv
20.0552 87.1709 20.0225 87.0303 19.9595 86.876 cv
19.894 86.7158 19.8574 86.5908 19.8574 86.5117 cv
19.8574 86.4297 19.8838 86.3896 19.9912 86.2998 cv
20.0439 86.2598 20.0981 86.2344 20.1538 86.2344 cv
20.2153 86.2344 20.2808 86.2598 20.3438 86.2998 cv
20.6313 86.4922 li
20.7295 86.5566 20.8164 86.5908 20.8882 86.5908 cv
21.0181 86.5908 21.2007 86.4463 21.3384 86.2344 cv
21.6157 85.8066 21.792 85.4551 21.792 85.3223 cv
21.792 85.2363 21.7393 85.1758 21.5615 85.0508 cv
20.9238 84.6006 20.5039 83.9189 20.5039 83.3359 cv
20.5039 83.2002 20.5352 83.0469 20.6001 82.8721 cv
20.9199 82.0059 li
21.0811 81.5703 21.1685 81.3438 21.1758 81.3311 cv
21.2705 81.2959 li
21.3799 81.2959 21.4458 81.3867 21.4458 81.543 cv
21.4458 81.6484 21.4204 81.7705 21.3701 81.9082 cv
21.292 82.1191 21.2354 82.374 21.2354 82.5176 cv
21.2354 82.748 21.3535 82.8721 21.5703 82.8721 cv
21.729 82.8721 21.9116 82.8281 22.106 82.7441 cv
23.0767 82.3242 23.8428 82.0986 24.3066 82.0986 cv
24.7432 82.0986 25.0137 82.1943 25.4717 82.5176 cv
25.5928 82.6025 25.6948 82.6475 25.7676 82.6475 cv
25.8232 82.6475 25.8926 82.5986 25.9531 82.5176 cv
25.9932 82.4629 26.0176 82.4063 26.0176 82.3584 cv
26.0176 82.2422 25.9492 82.0928 25.8247 81.9414 cv
25.6597 81.7383 25.5977 81.6133 25.5977 81.4883 cv
25.5977 81.3867 25.6646 81.3232 25.7705 81.3232 cv
26.2734 81.3232 27.061 82.9141 27.814 85.4355 cv
28.4048 87.4258 28.5698 87.627 30.4717 88.7061 cv
32.0815 89.6143 32.6929 90.5146 32.6929 91.9785 cv
32.6929 93.418 32.2944 95.2627 31.4639 97.6797 cv
31.2031 98.4443 31.0884 98.9619 31.0884 99.3877 cv
31.0884 99.7266 31.1538 100.055 31.4033 100.916 cv
31.5195 101.327 31.5938 101.576 31.6265 101.653 cv
31.6631 101.748 31.749 101.907 31.8823 102.135 cv
false sop
0 0 0 0 cmyk
f
24.4468 97.6475 mo
24.6372 97.2031 24.6978 97.0986 25.0542 96.5557 cv
25.5737 95.7734 25.7603 95.3584 25.7603 94.9873 cv
25.7603 94.4727 li
25.7603 93.9902 25.8472 93.7676 26.0391 93.7676 cv
26.1079 93.7676 26.1724 93.8027 26.209 93.8662 cv
26.3706 94.1211 li
26.4194 94.2031 26.5054 94.251 26.5957 94.251 cv
26.6904 94.251 26.8633 94.126 26.9575 93.9824 cv
27.1885 93.6318 27.3311 93.1846 27.3311 92.8389 cv
27.2979 92.4854 li
27.2666 92.124 li
27.2666 91.9297 27.3457 91.8457 27.5298 91.8457 cv
27.6548 91.8457 27.7065 91.8955 27.814 92.1348 cv
27.8818 92.29 27.9761 92.3916 28.0557 92.3916 cv
28.1436 92.3916 28.2446 92.3203 28.3252 92.1982 cv
28.5801 91.8135 li
28.7744 91.5234 li
28.8218 91.3691 li
28.8218 91.2813 28.7529 91.1992 28.5801 91.0752 cv
27.9863 90.6475 27.7266 89.9893 27.6851 88.7988 cv
27.6499 87.8965 27.5996 87.3066 27.5249 87.0361 cv
27.5059 86.9756 27.3145 86.5166 26.9463 85.6602 cv
26.8042 85.3203 26.6743 84.9385 26.5605 84.5059 cv
26.4849 84.21 26.3931 84.1191 26.1621 84.1191 cv
25.2891 84.1191 24.6323 84.8633 24.6323 85.8467 cv
24.6323 86.4268 24.873 87.3359 25.3125 88.4482 cv
25.9292 90.0039 26.0933 90.5586 26.0933 91.1094 cv
26.0933 92.2861 25.623 92.7988 23.998 93.3828 cv
22.1616 94.041 21.3018 94.9873 20.9854 96.6836 cv
21.1289 96.627 21.2339 96.5869 21.3057 96.5557 cv
21.5098 96.4717 21.6597 96.4219 21.752 96.3945 cv
22.2661 96.2676 li
22.707 96.1592 23.0601 95.9092 23.1309 95.6592 cv
23.2607 95.2119 li
23.292 95.1016 23.355 95.0283 23.4536 94.9873 cv
23.7422 94.8594 li
24.0308 94.7295 li
24.0938 94.8594 li
23.9668 95.2764 li
23.9224 95.4141 23.9009 95.6631 23.9009 96.0234 cv
23.9009 96.7246 24.0386 97.1377 24.4468 97.6475 cv
f
7.23486 67.999 mo
7.27637 68.1777 7.30029 68.2979 7.30029 68.3584 cv
7.30029 68.459 7.25586 68.7363 7.17041 69.1855 cv
7.11377 69.8359 li
7.11377 70.4092 7.21582 71.0205 7.39453 71.5254 cv
7.55859 71.9863 7.6001 72.1318 7.6001 72.2568 cv
7.58887 72.3916 li
7.55957 72.5244 7.50977 72.6211 7.46436 72.6211 cv
7.40137 72.6211 7.28662 72.5498 7.1377 72.4199 cv
6.76953 72.1016 6.37012 71.9365 5.9541 71.9365 cv
5.81934 71.9365 5.63379 71.96 5.4082 72.0029 cv
5.56836 72.3564 li
6.04834 73.5449 li
6.72314 74.5684 li
7.4248 75.0518 li
7.49561 75.0967 7.55957 75.1621 7.61914 75.2412 cv
7.68359 75.3311 7.71631 75.4043 7.71631 75.4531 cv
7.71631 75.5117 7.66064 75.5586 7.58887 75.5635 cv
6.94629 75.5938 li
6.84766 75.5986 6.76953 75.6582 6.76953 75.7295 cv
6.76953 75.8389 6.86279 76.1621 7.04346 76.6836 cv
7.36475 77.6143 li
7.90918 78.125 li
8.48486 78.5439 li
8.65527 78.666 8.75732 78.8047 8.75732 78.9072 cv
8.75732 78.9961 8.70215 79.084 8.64502 79.0898 cv
8.3252 79.1201 li
8.22021 79.1299 8.16113 79.2217 8.16113 79.3779 cv
8.16113 79.6172 8.38574 80.0518 8.80518 80.626 cv
9.30078 81.3018 9.6499 81.5244 10.2158 81.5244 cv
10.6973 81.5244 li
10.9268 81.5244 11.0669 81.6367 11.0669 81.8184 cv
11.0669 81.9688 10.9707 82.0566 10.7593 82.1025 cv
10.3154 82.1943 10.1816 82.2842 10.1816 82.4893 cv
10.1816 82.5713 10.2388 82.6934 10.3433 82.8389 cv
10.6016 83.1924 li
10.813 83.4854 11.0542 83.6777 11.209 83.6777 cv
11.2959 83.6777 11.4976 83.5879 11.6768 83.3828 cv
11.9629 83.0527 12.292 82.7842 12.7153 82.6797 cv
13.8286 82.3975 14.0615 82.2813 14.0615 82.0225 cv
14.0615 81.9316 14.0186 81.8037 13.9341 81.6543 cv
13.5791 81.0186 13.4531 80.6074 13.4531 80.085 cv
13.4531 79.6865 13.3496 79.4072 13.2031 79.4072 cv
13.144 79.4072 13.0444 79.5059 12.9399 79.666 cv
12.6772 80.0713 12.2275 80.3418 11.8188 80.3418 cv
10.709 80.3418 9.37256 78.6045 8.70947 76.3018 cv
8.55566 75.7686 8.47412 75.1582 8.47412 74.5723 cv
8.47412 73.9697 8.55566 73.291 8.70947 72.6143 cv
8.92236 71.6748 9.04102 71.1504 9.06104 71.0439 cv
9.10254 70.6094 li
9.10254 69.8145 8.37061 68.792 7.23486 67.999 cv
f
9.54297 72.4541 mo
9.30713 72.9014 9.09033 73.9053 9.09033 74.542 cv
9.09033 74.916 9.2124 75.2119 9.37012 75.2119 cv
9.42188 75.2119 9.4873 75.1514 9.54297 75.0518 cv
9.89551 74.4082 li
9.95605 74.3018 10.0117 74.1895 10.125 74.0166 cv
10.2524 73.8271 10.3472 73.6416 10.3472 73.541 cv
10.3472 73.1611 9.99609 72.6914 9.54297 72.4541 cv
f
13.0684 86.9102 mo
13.1401 86.9814 13.1904 87.0322 13.2285 87.0703 cv
13.3682 87.21 13.4541 87.293 13.4854 87.3252 cv
14.1099 87.9727 14.2041 88.0361 14.5054 88.0361 cv
14.7842 88.0361 15.3672 87.877 15.6968 87.7119 cv
15.8354 87.6416 15.9199 87.5557 15.9199 87.4902 cv
15.9199 87.4473 15.8047 87.3174 15.6006 87.1357 cv
15.249 86.8125 li
14.9805 86.5723 14.5845 86.3467 14.396 86.3467 cv
14.0288 86.3467 13.6509 86.5098 13.0684 86.9102 cv
f
20.5054 92.7109 mo
20.8481 92.8545 20.9688 92.9121 21.147 93.0322 cv
21.4355 93.2207 21.6045 93.3271 21.6572 93.3506 cv
21.7554 93.3926 21.9297 93.415 22.1655 93.415 cv
22.3115 93.415 22.4453 93.3926 22.5547 93.3506 cv
23.2305 93.0957 li
23.8711 92.8711 li
24.0435 92.8096 24.1606 92.7119 24.1606 92.623 cv
24.1606 92.5771 24.0156 92.5068 23.8062 92.4541 cv
23.6626 92.417 23.5005 92.3652 23.3247 92.2949 cv
22.5361 91.9756 22.4209 91.9316 22.1416 91.9316 cv
21.5137 91.9316 20.8809 92.2363 20.5054 92.7109 cv
f
28.6143 99.1543 mo
28.8271 98.6387 28.9761 98.5508 29.7031 98.5107 cv
30.5264 98.4658 31.3091 96.9922 31.3091 95.9941 cv
31.3091 95.8955 31.2759 95.8125 31.2334 95.8125 cv
31.1929 95.8125 31.1172 95.8496 31.0166 95.918 cv
30.7861 96.0684 30.626 96.1641 30.5376 96.2041 cv
29.6074 96.6191 li
28.9868 96.8955 28.4414 97.7246 28.4414 98.377 cv
28.4414 98.5957 28.4844 98.7813 28.6143 99.1543 cv
f
14.7686 71.2998 mo
15.0864 71.75 li
15.1567 71.8506 15.7114 72.251 15.7813 72.251 cv
15.8765 72.251 15.9307 72.1807 15.9849 71.9736 cv
16.1123 71.4902 li
16.1465 70.9561 li
16.1465 70.5342 15.9614 70.374 15.0864 70.1475 cv
14.8696 70.0898 14.7803 70.0986 14.6387 69.9844 cv
14.5054 69.8789 14.3311 69.79 14.2554 69.79 cv
14.1836 69.79 14.1235 69.8281 14.1235 69.8779 cv
14.1587 70.0195 li
14.3184 70.498 li
14.7686 71.2998 li
cp
true sop
0 .13 .49 .98 nzopmsc
f
18.1973 71.2959 mo
17.7788 72.0381 li
17.6777 72.1514 17.624 72.2109 17.6187 72.2139 cv
17.5874 72.2188 li
17.417 72.2188 17.2456 71.8291 17.2329 71.4258 cv
17.1724 70.7881 li
17.2217 70.5244 17.3779 70.4072 17.7788 70.3379 cv
18.104 70.2803 18.3232 70.2178 18.4214 70.1475 cv
18.7271 69.9287 18.8994 69.8105 18.9336 69.793 cv
18.9878 69.7832 li
19.0742 69.7832 19.1353 69.8438 19.1353 69.9404 cv
19.125 69.9844 li
18.9019 70.5322 li
18.1973 71.2959 li
cp
f
17.3628 73.4805 mo
17.8755 73.2246 li
17.9668 73.1797 18.0483 73.1553 18.1191 73.1553 cv
18.3691 73.1553 18.5542 73.3398 18.5542 73.6768 cv
18.5542 74.043 18.2681 74.5352 17.8755 75.2412 cv
17.4521 76.0078 17.1333 76.5273 16.8057 76.5273 cv
16.3457 76.5273 15.6914 75.7939 15.0562 74.5684 cv
14.9063 74.2822 14.8115 73.9375 14.8115 73.6768 cv
14.8115 73.2725 14.9893 73.0596 15.3296 73.0596 cv
15.4697 73.0596 15.5996 73.0928 15.6968 73.1592 cv
15.9849 73.3525 li
16.2373 73.5176 16.522 73.6074 16.8008 73.6074 cv
17.001 73.6074 17.1938 73.5645 17.3628 73.4805 cv
f
16.627 74.248 mo
16.2725 74.1855 li
16.2197 74.1816 li
16.0151 74.1816 15.9146 74.2979 15.9146 74.5283 cv
15.9146 74.8525 16.1665 75.4502 16.4971 75.917 cv
16.5571 76.002 16.6504 76.0527 16.7427 76.0527 cv
16.9507 76.0527 17.0967 75.6582 17.2031 75.0176 cv
17.2983 74.5381 li
17.3071 74.4463 li
17.3071 74.248 17.248 74.1807 17.0869 74.1807 cv
17.0112 74.1855 li
false sop
0 0 0 0 cmyk
f
88.1963 82.6143 mo
88.7544 83.3535 89.5386 83.835 90.1841 83.835 cv
90.3828 83.835 90.7285 83.7842 91.0474 83.7041 cv
91.2227 83.6592 91.3638 83.6406 91.4731 83.6406 cv
91.6299 83.6406 91.6943 83.6992 91.6943 83.8428 cv
91.6943 83.9531 91.6187 84.2275 91.5293 84.4434 cv
91.4292 84.6846 91.3638 84.8779 91.3384 85.0195 cv
91.2114 85.6914 li
90.8887 86.2676 li
90.4409 86.6846 li
90.3125 86.8154 li
90.3125 87.1016 li
90.3125 87.2461 li
90.3125 88.0303 90.0811 88.4727 89.4468 88.8975 cv
89.395 88.9287 89.3179 88.9834 89.2227 89.0566 cv
89.1577 89.3164 li
89.0151 89.9092 88.9097 90.2832 88.8379 90.4346 cv
88.7573 90.6055 88.5518 90.9053 88.229 91.333 cv
87.8408 91.8408 87.5884 92.2539 87.4282 92.6465 cv
87.2964 92.9688 87.1963 93.0605 86.9858 93.0605 cv
86.6699 93.0605 86.3584 92.665 86.3042 92.1982 cv
86.2339 92.2949 86.1797 92.3594 86.144 92.3916 cv
85.7622 92.6465 li
85.1494 93.0615 li
84.8823 93.248 84.7095 93.375 84.6392 93.4453 cv
84.2861 93.7998 li
84.2241 93.8623 84.1592 93.8965 84.1021 93.8965 cv
83.9409 93.8965 83.772 93.6221 83.6133 93.0928 cv
83.293 92.0391 li
83.2061 91.7559 83.1631 91.4063 83.1631 91.0029 cv
83.1631 90.4717 83.1982 90.2832 83.3887 89.8574 cv
82.7471 89.9248 82.5669 89.9629 82.2354 90.084 cv
82.1357 90.1191 82.0122 90.1465 81.9565 90.1465 cv
81.8496 90.1465 81.7856 90.0732 81.7856 89.9492 cv
81.7856 89.8789 81.8418 89.6572 81.9126 89.4736 cv
82.3311 88.3857 li
82.6563 87.54 83.6978 86.7705 84.5269 86.7705 cv
84.7236 86.7705 84.9971 86.8271 85.3447 86.9424 cv
85.5542 87.0107 85.7207 87.0439 85.8291 87.0439 cv
86.2012 87.0439 86.498 86.7705 86.498 86.4316 cv
86.498 86.2607 86.3848 86.0771 86.2412 86.0137 cv
86.1885 85.9863 85.8027 85.8701 85.0894 85.6602 cv
84.5493 85.501 84.2822 85.3018 83.6772 84.6006 cv
83.2378 84.0928 83.0659 83.9492 82.9058 83.9492 cv
82.7827 83.9492 82.7168 84.0293 82.7168 84.1748 cv
82.7471 84.6006 li
82.7583 84.7988 li
82.7583 85.6885 82.4927 86.5391 81.8506 87.7119 cv
80.9521 89.3438 li
80.5259 90.1201 80.3447 90.709 80.3447 91.2998 cv
80.3447 91.9453 80.6221 92.5166 80.9834 92.6152 cv
81.4663 92.7412 li
81.5259 92.7598 81.582 92.791 81.6255 92.8408 cv
81.687 92.9043 81.7246 92.9717 81.7246 93.0244 cv
81.7246 93.0928 81.6655 93.2012 81.5625 93.3213 cv
81.5054 93.3828 81.314 93.6318 80.9834 94.0566 cv
80.4307 94.7783 80.085 95.0381 79.4141 95.2422 cv
79.0273 96.1826 78.3945 96.7295 77.2666 97.1025 cv
77.1392 97.3242 li
76.7573 97.998 75.9102 98.6094 75.3691 98.6094 cv
75.2471 98.6094 li
75.1753 99.1943 74.7568 99.8057 74.1255 100.245 cv
73.6904 100.547 73.4434 100.73 73.3892 100.786 cv
73.3501 100.831 73.2959 100.927 73.2305 101.075 cv
73.0854 101.396 72.9531 101.527 72.7725 101.527 cv
72.4302 101.527 72.1475 101.207 71.9487 100.596 cv
71.8174 100.678 71.7217 100.742 71.6587 100.786 cv
71.2969 101.045 71.0928 101.184 71.0488 101.202 cv
70.9023 101.273 70.5269 101.383 69.9277 101.524 cv
69.1416 101.708 68.4609 102.043 68.292 102.327 cv
68.0044 102.806 li
67.8721 102.861 li
67.7158 102.861 67.5356 102.642 67.4585 102.357 cv
67.2813 101.692 67.1689 101.001 67.1689 100.558 cv
67.1689 99.4189 67.5454 98.6797 68.71 97.5176 cv
68.7065 97.2412 li
68.7065 95.4727 70.0576 94.2725 72.0439 94.2725 cv
72.3643 94.2813 li
73.4536 94.3467 li
73.5557 94.3506 li
74.144 94.3506 74.689 94.126 75.2798 93.6396 cv
76.0625 92.999 76.291 92.6055 76.291 91.8867 cv
76.291 91.6592 76.2275 91.3984 75.9834 90.5957 cv
75.8257 90.0654 75.7476 89.5693 75.7476 89.0889 cv
75.7476 87.7656 76.7183 86.1201 78.0376 85.2109 cv
78.377 84.9736 78.6294 84.665 78.6294 84.4844 cv
78.6294 84.4102 78.5898 84.3506 78.5396 84.3506 cv
78.4551 84.3506 78.3101 84.4385 78.1323 84.6006 cv
77.9785 84.7402 77.7192 84.9033 77.3623 85.084 cv
76.8506 85.3389 li
76.2734 85.5654 li
76.0967 85.6318 76.0073 85.7305 76.0073 85.8506 cv
76.0073 85.9219 76.0347 86.0215 76.082 86.1416 cv
76.123 86.2461 76.146 86.3262 76.146 86.376 cv
76.146 86.4473 76.0908 86.5762 75.9834 86.749 cv
75.5371 87.4863 li
75.0972 88.209 74.7808 88.5176 74.2207 88.7676 cv
73.8608 89.8232 73.3447 90.3584 72.5889 90.4688 cv
71.9839 91.6885 71.4492 92.1113 70.3765 92.2295 cv
70.228 92.7002 69.9707 93.0879 69.416 93.7051 cv
69.1865 93.9541 69.0469 94.127 69 94.2188 cv
68.749 94.668 68.7266 94.6982 68.6108 94.6982 cv
68.4644 94.6982 68.1289 94.4775 67.876 94.2188 cv
67.7612 94.0967 67.6641 93.9697 67.5884 93.832 cv
67.2988 93.3213 li
67.2056 93.1543 67.1094 93.0801 66.9897 93.0801 cv
66.7856 93.0928 li
66.0806 93.1914 li
65.6382 93.251 65.0083 93.6162 64.7979 93.9287 cv
64.4131 94.5068 li
64.373 94.5654 64.3174 94.6016 64.2598 94.6016 cv
63.9717 94.6016 63.7969 93.9697 63.7969 92.9209 cv
63.7969 92 63.938 91.3887 64.2544 90.9482 cv
65.1519 89.6982 li
65.2764 89.5244 65.3447 89.3516 65.3447 89.21 cv
65.3447 89.0674 65.2881 88.9229 65.1851 88.7988 cv
64.9941 88.5742 64.8125 88.4365 64.6719 88.4131 cv
63.9985 88.3213 li
63.8774 88.3018 63.8281 88.2725 63.8281 88.2207 cv
63.8281 88.1631 63.8638 88.0869 63.9331 88 cv
64.1538 87.7217 64.4272 87.4814 64.7349 87.293 cv
65.5288 86.8076 66.0508 86.6162 66.585 86.6162 cv
67.1284 86.6162 67.7197 86.8115 68.2617 87.166 cv
69.1904 87.7734 li
69.3213 87.8613 69.4756 87.9063 69.6382 87.9063 cv
70.0679 87.9063 70.3921 87.6514 70.6943 87.0703 cv
70.9893 86.5117 71.1177 86.0605 71.1177 85.585 cv
71.1177 84.3799 70.2568 83.5127 69.063 83.5127 cv
68.5073 83.5127 67.939 83.7295 67.3955 84.1533 cv
67.2305 84.2803 67.123 84.4004 67.0742 84.5059 cv
66.8184 85.084 li
66.7593 85.2217 66.6655 85.3066 66.5889 85.3066 cv
66.4277 85.3066 66.0645 84.8438 65.7607 84.249 cv
65.603 83.9375 65.4492 83.5527 65.313 83.0938 cv
65.1221 82.4678 65.0396 81.9971 65.0396 81.4961 cv
65.0874 80.6279 li
64.6514 79.9473 64.5078 79.4512 64.5078 78.6436 cv
64.5078 78.3506 64.5518 78.125 64.7349 77.5176 cv
64.4663 77.0732 64.3828 76.7383 64.3828 76.0898 cv
64.4131 75.6885 li
64.5088 75.2422 li
64.5732 74.8584 li
64.2646 74.4551 64.1763 74.1826 63.8677 72.7764 cv
63.6982 71.9805 63.5913 71.6338 63.4556 71.4287 cv
63.3906 71.3379 63.3569 71.2695 63.3569 71.2363 cv
63.3569 71.0498 63.8032 70.8799 64.3159 70.8799 cv
64.7671 70.915 li
64.6538 70.6182 64.6313 70.5029 64.6313 70.2686 cv
64.6313 69.873 64.7119 69.4316 64.8633 68.9922 cv
65.0322 68.5029 65.0674 68.3672 65.0674 68.207 cv
65.0674 67.8281 65.0093 67.4414 64.9272 67.2305 cv
64.6719 66.5898 li
64.6138 66.4443 64.5884 66.3447 64.5884 66.2588 cv
64.5884 66.1934 64.6313 66.1709 64.7485 66.1709 cv
65.3774 66.1709 66.5791 66.8506 67.5215 67.7412 cv
68.4595 68.6279 68.7646 69.3428 68.7646 70.6621 cv
68.71 71.3643 li
69.5825 72.1299 69.9634 72.7627 69.9634 73.4482 cv
69.9634 73.9502 69.8003 74.2842 69.3179 74.7578 cv
68.4541 75.6182 68.2588 76.0674 68.2588 77.1738 cv
68.2588 78.876 68.7671 79.7949 69.7061 79.7949 cv
70.5327 79.7949 71.168 78.8994 71.2729 77.584 cv
71.3687 76.3643 li
71.394 76.0479 71.4482 75.6641 71.5288 75.2109 cv
71.583 74.9219 71.627 74.5371 71.627 74.375 cv
71.627 73.9424 71.3438 73.3975 70.5039 72.4199 cv
69.6055 71.3662 69.2998 70.8008 69.2998 69.9795 cv
69.2998 68.9932 69.981 68.2725 70.9072 68.2725 cv
71.1367 68.2725 71.2524 68.3066 71.5288 68.4482 cv
71.5425 67.8906 71.5679 67.7871 71.8828 67.0029 cv
72.1323 66.3867 72.3984 65.9482 72.5244 65.9482 cv
72.5649 65.9482 72.6338 65.9941 72.7148 66.0771 cv
72.8535 66.2139 72.9937 66.3311 73.1333 66.4268 cv
73.3301 66.5645 73.4346 66.6377 73.4536 66.6523 cv
73.5239 66.71 73.6201 66.8076 73.7407 66.9424 cv
73.9399 66.2256 74.1455 65.8857 74.7354 65.3066 cv
75.1841 64.8672 75.3506 64.7305 75.4375 64.7305 cv
75.5059 64.7305 75.5874 64.79 75.666 64.8906 cv
76.0503 65.4004 li
76.5933 66.0117 li
76.8018 66.2422 76.877 66.4443 76.979 67.0029 cv
77.2983 66.8125 li
77.8096 66.5244 li
77.9067 66.4717 78.0342 66.3867 78.1978 66.2666 cv
78.2852 66.2041 78.3569 66.167 78.3994 66.167 cv
78.4526 66.167 78.5132 66.2607 78.5498 66.3965 cv
78.7397 67.1328 li
79.1587 67.9678 li
79.2832 68.2158 79.3198 68.4092 79.3198 68.792 cv
79.3188 68.9922 li
79.5342 68.9854 li
80.1646 68.9854 80.71 69.7324 80.71 70.5928 cv
80.71 71.7354 79.8003 73.2109 78.6138 73.9922 cv
78.5044 74.3779 78.479 74.5332 78.479 74.8438 cv
78.479 77.3926 79.1494 77.9277 83.0674 78.5117 cv
84.0479 78.6592 84.9268 78.8389 85.6953 79.0557 cv
85.8228 79.0938 86.6685 79.3701 88.229 79.8906 cv
89.0947 80.1797 89.6772 80.3076 90.1274 80.3076 cv
90.604 80.3076 90.8687 80.1699 90.8687 79.9189 cv
90.8687 79.4814 90.2266 79.0889 88.2617 78.3193 cv
85.4727 77.2305 li
82.6372 76.1211 81.2988 74.3906 81.2988 71.8438 cv
81.2988 68.877 83.5239 66.6504 86.4961 66.6504 cv
87.6162 66.6504 88.708 66.8828 90.2813 67.4551 cv
92.3052 68.1924 92.4072 68.2236 92.6284 68.2236 cv
93.019 68.2236 93.2334 67.957 93.2935 67.3916 cv
93.3442 66.9111 93.4741 66.7158 93.7388 66.7158 cv
94.1318 66.7158 94.5596 67.0811 94.8643 67.6797 cv
95.1279 68.2002 95.2803 68.8076 95.2803 69.3428 cv
95.2803 70.4004 94.7246 71.0938 93.7109 71.2988 cv
93.0327 72.1865 92.1743 72.627 91.1294 72.627 cv
89.8525 72.627 89.2197 72.374 87.0415 71.0127 cv
86.2627 70.5225 85.9297 70.4043 85.3574 70.4043 cv
84.5938 70.4043 84.0273 70.8779 84.0273 71.5205 cv
84.0273 72.1074 84.502 72.4932 85.5679 72.7764 cv
86.2031 72.9424 86.2954 72.9902 86.626 73.3184 cv
86.8838 73.2578 86.9985 73.2402 87.1587 73.2402 cv
88.2002 73.2402 89.4834 73.8018 90.5684 74.7305 cv
92.5449 75.3408 94.3008 77.4707 94.3008 79.2598 cv
94.3008 81.2363 92.5879 83.0068 90.6729 83.0068 cv
90.1577 83.0068 89.1265 82.8447 88.1963 82.6143 cv
true sop
0 .13 .49 .98 nzopmsc
f
87.0415 91.4922 mo
87.1699 91.1396 li
87.2998 90.6885 li
87.3242 90.6074 87.4438 90.4248 87.6514 90.1475 cv
87.9771 89.7188 88.1421 89.1816 88.1421 88.5537 cv
88.1421 88.3555 88.0918 88.1719 87.9722 87.9336 cv
87.9092 87.8076 87.8745 87.707 87.8745 87.6367 cv
87.8745 87.5928 87.8984 87.542 87.9414 87.4873 cv
87.981 87.4307 88.0273 87.3975 88.0703 87.3916 cv
88.0903 87.3877 li
88.1724 87.3877 88.311 87.4824 88.4204 87.6133 cv
88.5566 87.7783 88.6763 87.8711 88.7471 87.8711 cv
88.8921 87.8711 89.0435 87.627 89.1265 87.2627 cv
89.1704 87.0674 89.1909 86.9629 89.1909 86.9414 cv
89.1909 86.7861 89.061 86.3838 88.9023 86.0439 cv
88.8403 85.915 88.8101 85.8057 88.8101 85.7188 cv
88.8101 85.6045 88.8857 85.5117 88.9868 85.5117 cv
89.0801 85.5117 89.2324 85.6113 89.4126 85.7852 cv
89.501 85.8701 89.5879 85.915 89.6563 85.915 cv
89.8564 85.915 90.0015 85.71 90.1528 85.209 cv
90.2461 84.8984 90.2813 84.7598 90.2813 84.708 cv
90.2813 84.6143 90.2407 84.5596 90.1675 84.5596 cv
90.0557 84.5684 li
89.6758 84.6084 li
89.0908 84.6084 88.2642 84.2051 87.876 83.7373 cv
86.9785 82.6475 li
86.6328 82.2266 86.1489 81.5879 86.1782 81.5879 cv
85.4395 81.1074 li
85.3198 81.0283 85.248 80.9316 85.248 80.8467 cv
85.248 80.7256 85.3691 80.6455 85.5532 80.6455 cv
85.7231 80.6455 86.2476 80.832 87.2041 81.2363 cv
88.127 81.627 89.5806 81.9463 90.4526 81.9463 cv
91.9854 81.9463 93.248 80.7061 93.248 79.2021 cv
93.248 78.3789 92.8804 77.6191 91.979 76.5576 cv
91.8101 76.3584 91.5205 76.1641 91.3867 76.1641 cv
91.2817 76.1641 91.209 76.2422 91.209 76.3535 cv
91.209 76.4414 91.2432 76.5654 91.3071 76.7148 cv
91.3477 76.8154 91.3691 76.917 91.3691 77.0088 cv
91.3691 77.1553 91.3149 77.2402 91.2163 77.2402 cv
91.0146 77.2402 90.8042 76.9102 90.6328 76.333 cv
90.4209 75.6172 90.0024 75.1924 89.0278 74.6982 cv
88.6572 74.5068 88.1709 74.3369 88.0146 74.3369 cv
87.9517 74.3369 87.9092 74.3926 87.9092 74.4775 cv
87.9092 74.5986 87.9541 74.7285 88.0361 74.8574 cv
88.1772 75.0732 88.2671 75.2822 88.2944 75.4688 cv
88.2954 75.498 li
88.2954 75.623 88.2314 75.6924 88.1167 75.6924 cv
87.9102 75.6924 87.8647 75.6387 87.396 74.9219 cv
87.1548 74.5537 86.5098 74.0664 85.9526 73.832 cv
85.7773 73.7568 85.5918 73.7129 85.4077 73.7021 cv
85.3892 73.7012 li
85.2729 73.7012 85.1836 73.7568 85.1836 73.8271 cv
85.1836 73.8525 85.2339 73.9561 85.3271 74.1211 cv
85.3755 74.3018 li
85.3755 74.4004 85.3096 74.4756 85.2241 74.4756 cv
85.0322 74.4756 84.436 73.9873 83.9663 73.4482 cv
83.457 72.8604 83.1318 72.1152 83.1318 71.5293 cv
83.1318 70.3037 84.3027 69.2139 85.6133 69.2139 cv
85.9438 69.2139 86.2236 69.2725 86.4341 69.3779 cv
87.5547 69.9541 li
88.8706 70.8223 li
89.627 71.3174 90.6631 71.6895 91.2896 71.6895 cv
91.5239 71.6895 91.6992 71.6572 92.2993 71.4902 cv
92.6143 71.4053 92.8086 71.2803 92.8086 71.166 cv
92.7959 71.1396 li
92.6846 71.0752 li
91.979 71.0146 li
91.5869 70.9746 90.6973 70.5742 89.9927 70.1123 cv
88.5176 69.1533 li
87.2041 68.6064 li
87.1045 68.5674 87.04 68.502 87.04 68.4385 cv
87.04 68.3721 87.1084 68.3164 87.1904 68.3164 cv
87.1914 68.3164 87.3149 68.3418 87.5547 68.3818 cv
88.7725 68.7363 li
89.0801 68.8232 89.5718 69.0488 90.248 69.4082 cv
91.5845 70.1191 92.4556 70.4336 93.0957 70.4336 cv
93.8369 70.4336 94.3813 69.9248 94.3813 69.2344 cv
94.3813 69.0029 94.3296 68.624 94.2554 68.3184 cv
94.2163 68.1689 94.1509 68.0273 94.061 67.9014 cv
94.0049 67.8203 93.9453 67.7754 93.9038 67.7754 cv
93.8115 67.7754 93.7588 67.8721 93.7588 68.0361 cv
93.7739 68.2559 li
93.7866 68.4424 li
93.7866 69.0342 93.5557 69.2422 92.9028 69.2422 cv
92.3696 69.2422 91.6553 69.0283 90.0239 68.3818 cv
88.4971 67.7813 87.542 67.5498 86.5928 67.5498 cv
84.1787 67.5498 82.0649 69.5186 82.0649 71.7637 cv
82.0649 73.7021 83.3535 75.1865 85.9854 76.2686 cv
88.708 77.3896 li
90.9619 78.3154 91.79 78.9805 91.79 79.8564 cv
91.79 80.5869 91.1094 81.0566 90.0503 81.0566 cv
89.5928 81.0566 89.0229 80.9307 87.9722 80.5947 cv
85.4219 79.7822 83.7642 79.4453 82.3047 79.4453 cv
79.9263 79.4453 78.2334 80.0957 76.8823 81.5244 cv
76.7031 81.7129 76.5981 81.7705 76.4409 81.7705 cv
76.3325 81.7705 76.2227 81.7275 75.9834 81.5879 cv
75.7412 81.4463 75.4717 81.3574 75.2798 81.3574 cv
75.0454 81.3574 74.6812 81.5586 74.5098 81.7813 cv
74.1895 82.1973 li
74.0962 82.3193 73.9917 82.3926 73.9063 82.3926 cv
73.6743 82.3926 73.2632 81.9971 73.0044 81.5244 cv
72.8462 81.2363 72.7388 80.9551 72.6846 80.6904 cv
72.6431 80.4883 72.6182 80.1602 72.6182 79.8115 cv
72.6504 79.2158 li
72.7476 78.5771 li
72.7939 78.2695 72.8286 78.085 72.8447 78.0313 cv
72.8687 77.9541 72.9307 77.9043 72.9985 77.9043 cv
73.165 77.9043 73.2378 78.0557 73.2378 78.4063 cv
73.229 78.6084 li
73.2227 78.7529 li
73.2227 79.665 73.5845 80.501 73.9819 80.501 cv
74.2944 80.501 74.5703 79.9404 74.7998 78.8311 cv
74.8462 78.6084 74.9355 78.4795 75.0444 78.4795 cv
75.1729 78.4795 75.25 78.6436 75.3457 79.1211 cv
75.4048 79.4316 75.6079 79.8623 75.8257 80.1465 cv
75.9502 80.3076 76.083 80.4043 76.1914 80.4043 cv
76.4536 80.4043 76.6226 80.0107 76.7534 79.0889 cv
76.8066 78.7305 76.9121 78.5078 77.0356 78.5078 cv
77.0879 78.5078 77.1367 78.5342 77.1704 78.5771 cv
77.1934 78.6025 77.2676 78.7207 77.3965 78.9297 cv
77.4741 79.0615 77.5967 79.1689 77.748 79.249 cv
77.9077 79.332 78.0366 79.3779 78.1201 79.3779 cv
78.2217 79.3779 78.3291 79.3301 78.4199 79.249 cv
78.5635 79.1211 78.644 79.0244 78.644 78.9863 cv
78.644 78.9395 78.5786 78.8389 78.4526 78.7041 cv
78.2422 78.4785 78.0796 78.1758 77.8765 77.6445 cv
77.7417 77.293 77.647 77.0508 77.5894 76.9092 cv
77.5391 76.792 77.4834 76.7148 77.4277 76.6855 cv
77.3257 76.6592 li
77.1377 76.6855 li
77.1016 76.6943 76.877 76.7588 76.4663 76.875 cv
76.2568 76.9082 li
76.166 76.9082 76.1069 76.8486 76.1069 76.7559 cv
76.1069 76.6699 76.2217 76.5146 76.3701 76.3975 cv
77.1807 75.752 77.6636 74.6699 77.8438 73.0957 cv
77.9531 72.1387 78.0771 71.7754 78.4839 71.2041 cv
78.5698 71.085 78.644 71.0127 78.6846 71.0127 cv
78.8096 71.0127 78.8774 71.1094 78.8774 71.2949 cv
78.8774 71.4189 78.8418 71.5732 78.7729 71.75 cv
78.7275 71.873 78.7031 72.0049 78.7031 72.1387 cv
78.7085 72.2607 li
78.7729 72.4551 li
79.126 72.3252 li
79.5088 71.8789 li
79.7383 71.6133 79.9302 71.0098 79.9302 70.5654 cv
79.9302 70.2588 79.8555 70.0439 79.6729 69.8271 cv
79.4702 69.5869 79.3296 69.4902 79.1851 69.4902 cv
78.9658 69.5059 li
78.7388 69.5225 li
78.5322 69.5225 78.4287 69.46 78.4287 69.333 cv
78.4839 69.0889 li
78.5181 68.7363 li
78.3267 67.9365 li
78.1665 67.5498 li
78.0684 67.2295 li
77.8438 67.3896 li
77.3633 67.6768 li
77.2388 67.752 77.1089 67.8721 76.9775 68.0303 cv
76.5225 68.583 76.4937 68.6094 76.311 68.6094 cv
76.1948 68.6094 76.1284 68.5674 76.1284 68.4873 cv
76.146 68.3516 li
76.2114 68.0576 76.2417 67.8359 76.2417 67.6865 cv
76.2417 67.1279 75.8359 66.2852 75.3457 65.8203 cv
74.6763 66.46 74.3169 67.165 74.3169 67.8408 cv
74.3169 68.2256 li
74.3169 68.3721 74.269 68.4482 74.1709 68.4482 cv
74.1597 68.4482 li
74.0801 68.4365 74.0005 68.375 73.9336 68.2871 cv
73.5503 67.7754 li
73.5215 67.7363 73.3501 67.5977 73.0352 67.3574 cv
72.9761 67.3105 72.8887 67.2363 72.7803 67.1357 cv
72.6504 67.3896 li
72.334 68.0254 72.2231 68.4063 72.2031 68.9287 cv
72.188 69.3564 72.1528 69.4805 72.0527 69.4805 cv
72.0039 69.4805 71.9346 69.457 71.8501 69.4082 cv
71.3638 69.1367 71.3193 69.1182 71.1089 69.1182 cv
70.5327 69.1182 70.1382 69.5313 70.1382 70.1377 cv
70.1382 70.374 70.272 70.7334 70.5366 71.2041 cv
70.8291 71.7275 71.2715 72.2061 71.4629 72.2061 cv
71.5186 72.2061 71.5298 72.168 71.5298 72.0088 cv
71.5288 71.9424 li
71.4985 71.3975 li
71.4331 70.9785 li
71.4292 70.9238 li
71.4292 70.8008 71.4771 70.7451 71.5742 70.7451 cv
71.8638 70.7451 72.1177 71.5938 72.333 73.2871 cv
72.5195 74.7764 72.9307 75.8037 73.5806 76.3975 cv
73.7461 76.5488 73.8418 76.6729 73.8418 76.7441 cv
73.8418 76.7979 73.7852 76.8467 73.7144 76.8467 cv
73.6201 76.8467 73.4746 76.7891 73.2935 76.6855 cv
73.1763 76.6182 73.0586 76.583 72.9453 76.583 cv
72.625 76.583 72.2671 76.957 72.2031 77.3594 cv
71.9141 79.1846 li
71.6899 81.751 li
71.6475 82.2363 71.7129 82.8867 71.8818 83.6729 cv
72.0303 84.3643 72.1074 84.874 72.1074 85.1904 cv
72.1074 87.1113 70.9111 88.6318 68.9321 89.2178 cv
66.8813 89.8242 li
65.603 90.2041 64.9746 91.0459 64.7988 92.6123 cv
65.127 92.3516 65.2275 92.3105 65.7295 92.2305 cv
66.3354 92.1348 li
66.5938 92.0918 66.7778 92.0361 66.8813 91.9736 cv
66.939 91.9385 67.0566 91.8184 67.2354 91.6191 cv
67.7798 91.0127 li
67.9854 90.7803 68.1709 90.6494 68.2842 90.6494 cv
68.3599 90.6494 68.4219 90.7344 68.4219 90.834 cv
68.4219 90.9512 68.3423 91.1387 68.1958 91.3643 cv
68.0449 91.6006 67.9614 91.8867 67.9614 92.1895 cv
67.9614 92.5977 68.0698 92.8574 68.4849 93.4473 cv
68.5376 93.2529 68.5801 93.125 68.6143 93.0615 cv
68.6675 92.96 68.8276 92.7354 69.0947 92.3896 cv
69.5386 91.8154 69.8574 91.2158 69.8623 90.9453 cv
69.8711 90.4492 69.915 90.2881 70.041 90.2881 cv
70.1484 90.2881 70.1675 90.3125 70.2163 90.5938 cv
70.228 90.6631 70.2622 90.7305 70.3125 90.7881 cv
70.3867 90.8691 70.459 90.916 70.5078 90.916 cv
70.5483 90.916 70.6362 90.8711 70.7627 90.7881 cv
70.9829 90.6396 71.1543 90.4883 71.2729 90.3398 cv
71.4067 90.1738 71.5122 89.9795 71.5928 89.7627 cv
71.7002 89.4814 71.7568 89.2764 71.7568 89.1563 cv
71.7529 88.7422 li
71.7529 88.6318 71.7983 88.543 71.8589 88.543 cv
71.9346 88.543 72.0986 88.7109 72.2031 88.8975 cv
72.2739 89.0215 72.3179 89.0586 72.4087 89.0586 cv
72.4272 89.0586 li
72.5435 89.0459 72.6431 88.999 72.7148 88.9287 cv
73.1055 88.5469 73.3589 88.0771 73.3589 87.7266 cv
73.3252 87.1357 li
73.1973 86.6514 li
73.1914 86.6104 li
73.1914 86.5098 73.2642 86.4258 73.3467 86.4258 cv
73.4912 86.4258 73.6504 86.6318 73.8696 87.1016 cv
73.9717 87.3242 74.0664 87.4258 74.1616 87.4258 cv
74.3145 87.4258 74.4341 87.3115 74.7354 86.876 cv
75.0239 86.4609 li
75.0869 86.3691 75.1201 86.2598 75.1201 86.1377 cv
75.1201 86.0264 75.0869 85.915 75.0239 85.8213 cv
74.7656 85.4355 li
74.7241 85.3691 74.7017 85.2588 74.7017 85.1143 cv
74.7017 84.6787 74.8599 84.1855 75.1841 83.6094 cv
75.4199 83.1885 75.5601 82.9209 75.6001 82.8066 cv
75.6504 82.6738 75.7061 82.6123 75.7778 82.6123 cv
75.8335 82.6123 75.8872 82.6895 75.8872 82.7734 cv
75.8574 83.1279 li
75.8574 83.3848 li
75.8574 83.6387 li
75.8999 83.7568 75.9785 83.8027 76.1333 83.8027 cv
76.2314 83.8027 76.3428 83.7783 76.4663 83.7373 cv
77.2666 83.4482 li
77.458 83.3799 77.7041 83.2588 78.0039 83.0938 cv
79.2598 82.3984 79.6475 82.2539 80.2666 82.2539 cv
80.6357 82.2539 81.1108 82.3975 81.7866 82.709 cv
81.9253 82.7734 82.0376 82.8086 82.1167 82.8086 cv
82.2104 82.8086 82.311 82.749 82.3965 82.6475 cv
82.46 82.5732 82.4912 82.4824 82.4912 82.4033 cv
82.4912 82.2861 82.4473 82.1484 82.3628 82.0059 cv
82.2607 81.8291 82.167 81.6055 82.167 81.5273 cv
82.167 81.4404 82.2227 81.3867 82.3145 81.3867 cv
82.3877 81.3867 82.4976 81.4639 82.5557 81.5566 cv
82.6514 81.71 82.897 82.1357 83.292 82.8369 cv
83.8887 83.8994 84.667 84.6396 85.3447 84.793 cv
86.7539 85.1152 li
87.1904 85.2139 87.3013 85.3828 87.3013 85.9268 cv
87.3013 86.9219 86.8296 87.7979 86.0181 88.3184 cv
84.8633 89.0586 li
84.4438 89.3242 84.0933 90.0625 84.0933 90.6748 cv
84.0933 91.0713 84.1895 91.7705 84.3174 92.3252 cv
84.542 92.1025 li
85.0879 91.7813 li
85.5693 91.2998 li
85.8252 90.5938 li
86.0801 89.9521 li
86.2061 89.6426 86.3535 89.4395 86.4531 89.4395 cv
86.5649 89.4395 86.6279 89.6143 86.6279 89.9297 cv
86.624 90.0176 li
86.623 90.1377 li
86.623 90.5986 86.6851 90.8008 87.0415 91.4922 cv
false sop
0 0 0 0 cmyk
f
68.0625 100.636 mo
68.0625 99.1104 68.6157 98.4453 70.8237 97.3252 cv
75.1792 95.1162 77.5283 93.0898 77.5283 91.5508 cv
77.5283 91.2402 77.4268 90.7852 77.1392 89.8242 cv
76.9629 89.2324 76.8633 88.7373 76.8633 88.4326 cv
76.8633 87.7227 77.4468 86.6475 78.1978 85.9805 cv
78.8057 85.4355 li
79.1396 85.1357 79.3877 84.7041 79.3877 84.4238 cv
79.3828 84.2793 li
79.374 84.0889 li
79.374 83.7725 79.4976 83.6533 79.8301 83.6387 cv
80.1191 83.6094 li
80.2651 83.5635 80.3511 83.543 80.3657 83.543 cv
80.4692 83.543 80.5703 83.6035 80.6343 83.7041 cv
80.792 83.9609 li
81.0166 84.2148 li
81.0894 84.2979 81.165 84.3457 81.2222 84.3457 cv
81.2622 84.3457 81.3491 84.3135 81.4663 84.251 cv
81.6201 84.165 81.7402 84.1289 81.8545 84.1289 cv
82.0225 84.1289 82.1069 84.2188 82.1069 84.4053 cv
82.1069 85.0488 81.6895 85.9795 80.9521 86.9727 cv
79.7231 88.6377 79.3188 89.5332 79.3188 90.5996 cv
79.3188 91.4355 79.5581 92.1689 80.0244 92.7744 cv
80.1064 92.8848 80.1533 92.9668 80.1533 93.0107 cv
80.1533 93.0967 80.0737 93.2402 79.9287 93.415 cv
79.873 93.4824 79.8076 93.5664 79.7344 93.6729 cv
79.479 94.041 79.3086 94.1865 79.1396 94.1865 cv
79.0137 94.1865 78.894 94.083 78.8379 93.9268 cv
78.71 93.5771 li
78.6729 93.4775 78.6001 93.4121 78.5293 93.4121 cv
78.5044 93.4121 78.4502 93.4648 78.3887 93.5449 cv
78.3052 93.6514 78.2622 93.7754 78.2622 93.8965 cv
78.2622 94.4414 li
78.2622 94.6572 78.1831 94.8828 78.0366 95.082 cv
77.9131 95.2529 77.7632 95.4141 77.5879 95.5615 cv
77.4668 95.667 77.3774 95.7236 77.3359 95.7236 cv
77.2441 95.7236 77.1528 95.6211 77.1074 95.4668 cv
76.9136 94.8252 li
76.8857 94.7314 76.8213 94.666 76.7534 94.666 cv
76.6465 94.666 76.5557 94.8467 76.5278 95.1162 cv
76.4624 95.8428 76.3364 96.2832 76.146 96.4619 cv
75.6958 96.875 li
75.5508 97.0137 75.3818 97.1104 75.29 97.1104 cv
75.1968 97.1104 75.1172 97.0693 75.0869 97.0049 cv
74.8618 96.5225 li
74.835 96.4639 74.7808 96.4238 74.7202 96.4238 cv
74.5903 96.4238 74.4946 96.6787 74.4468 97.1641 cv
74.3311 98.3154 74.0898 98.835 73.4536 99.2803 cv
72.9546 99.6348 72.8462 99.751 72.6533 100.179 cv
72.373 99.7656 72.2651 99.416 72.2651 98.8994 cv
72.2651 98.6338 72.3076 98.4395 72.397 98.29 cv
72.5308 98.0498 72.604 97.8662 72.604 97.7578 cv
72.604 97.6787 72.5532 97.6162 72.4893 97.6162 cv
72.46 97.6162 72.4023 97.6611 72.3301 97.7422 cv
72.2397 97.8477 72.0996 97.9541 71.9141 98.0645 cv
71.3384 98.3965 71.2515 98.5156 71.1128 99.1543 cv
70.9277 100.017 70.5166 100.416 69.6406 100.593 cv
68.5552 100.815 68.4897 100.843 68.1001 101.204 cv
68.0625 100.636 li
cp
f
65.9854 67.582 mo
65.9854 67.9033 li
65.9893 68.3779 li
65.9893 68.5479 65.9736 68.668 65.9204 68.8975 cv
65.8174 69.3428 65.7925 69.4961 65.7925 69.6221 cv
65.7925 70.2354 65.8779 70.5381 66.2397 71.1699 cv
66.4404 71.5205 66.5703 71.9424 66.5703 72.2471 cv
66.5703 72.376 66.5181 72.4521 66.4297 72.4521 cv
66.376 72.4521 66.3154 72.4199 66.2734 72.3594 cv
66.0176 72.0049 li
65.8125 71.7236 65.6196 71.6494 65.0986 71.6494 cv
64.543 71.6846 li
64.7651 72.2314 64.8369 72.4395 64.9272 72.8057 cv
65.187 73.8525 65.2236 73.9287 65.7935 74.4414 cv
66.3647 74.958 66.4189 75.0234 66.4189 75.209 cv
66.4189 75.3545 66.3193 75.4678 66.1982 75.4678 cv
65.9854 75.4346 li
65.8594 75.4219 li
65.6851 75.4219 65.5249 75.7422 65.5249 76.0996 cv
65.5249 76.3047 65.6069 76.6299 65.7295 76.9082 cv
65.8086 77.0967 65.8857 77.2275 65.9521 77.2949 cv
66.2734 77.6143 li
66.356 77.6943 66.4033 77.8145 66.4033 77.9424 cv
66.4033 78.0986 66.313 78.2285 66.2085 78.2285 cv
66.1436 78.2285 66.0454 78.1904 65.9204 78.125 cv
65.8398 78.085 65.7642 78.0615 65.6953 78.0615 cv
65.5527 78.0615 65.4834 78.1494 65.4834 78.3252 cv
65.5352 78.8018 li
65.7295 79.6318 li
65.772 79.8193 65.8906 80.0273 66.0806 80.2441 cv
66.2446 80.4297 66.4102 80.5586 66.5615 80.6279 cv
66.9658 80.8027 67.1812 80.9014 67.2041 80.917 cv
67.2646 80.9619 67.2988 81.0566 67.2988 81.1729 cv
67.2988 81.293 67.2041 81.3965 67.0854 81.3965 cv
67.0503 81.3965 66.939 81.373 66.7539 81.332 cv
66.4287 81.3008 li
66.1025 81.3008 66.0806 81.3184 66.0806 81.5703 cv
66.0806 81.7314 66.1025 81.9004 66.1455 82.0684 cv
66.2734 82.5811 li
66.4102 83.123 66.585 83.417 66.7778 83.417 cv
66.8193 83.417 66.9004 83.3691 67.0098 83.2871 cv
67.4736 82.9316 68.4053 82.6143 68.9902 82.6143 cv
69.5913 82.6143 70.2783 82.6875 70.5366 82.7744 cv
70.6831 82.8252 70.7876 82.8525 70.8433 82.8525 cv
70.9224 82.8525 70.9478 82.7734 70.9526 82.4883 cv
71.0186 81.9111 li
71.147 80.917 li
71.2417 80.1797 li
71.2417 79.7617 li
71.124 79.8574 71.04 79.9336 70.9829 79.9863 cv
70.4385 80.498 70.0952 80.6582 69.5317 80.6582 cv
68.0571 80.6582 67.2114 79.002 67.2114 76.1113 cv
67.2114 74.9189 67.3867 73.2324 67.7158 71.2988 cv
67.7852 70.8926 67.8164 70.6094 67.8164 70.4102 cv
67.8164 69.3564 67.1494 68.3262 65.9854 67.582 cv
f
68.1641 74.7617 mo
68.4521 74.4756 li
68.7402 74.2178 li
68.98 74.0078 69.1719 73.5615 69.1719 73.2324 cv
69.1719 73.0811 69.1401 72.9395 69.062 72.7764 cv
68.9507 72.5361 68.7363 72.3213 68.6069 72.3213 cv
68.4976 72.3213 68.3999 72.585 68.3574 72.999 cv
68.292 73.4805 li
68.1973 73.9609 li
68.1641 74.4414 li
68.1641 74.7617 li
cp
f
65.3433 87.8721 mo
65.6724 87.9932 65.7407 88.0479 66.0796 88.4482 cv
66.5244 88.9648 66.7705 89.0879 67.3604 89.0879 cv
67.52 89.0879 67.6714 89.0674 67.814 89.0264 cv
68.2275 88.8975 li
68.5479 88.7988 li
68.7012 88.7568 68.8047 88.6885 68.8047 88.6367 cv
68.8047 88.5693 68.5527 88.3564 68.1641 88.0957 cv
67.9072 87.9209 67.6499 87.7705 67.3955 87.6465 cv
67.1182 87.5107 66.8887 87.4473 66.6606 87.4473 cv
66.2095 87.4473 65.7749 87.5869 65.3433 87.8721 cv
f
69.6704 96.8926 mo
69.6704 95.8584 70.688 95.0088 71.9282 95.0088 cv
72.5483 95.0088 72.9092 95.1328 72.9092 95.3438 cv
72.9092 95.5078 72.6357 95.7305 72.043 96.0449 cv
71.9849 96.0742 71.6772 96.2432 71.1128 96.5586 cv
70.4678 96.9141 70.2681 97.0137 69.7021 97.2627 cv
69.6704 96.8926 li
cp
f
82.7158 89.1191 mo
83.1709 89.0264 83.3232 88.9082 83.5488 88.8994 cv
84.126 88.9287 li
84.1968 88.9043 84.3262 88.8145 84.5093 88.6719 cv
84.6123 88.5918 84.7627 88.4863 84.958 88.3525 cv
85.5996 87.915 85.6338 87.8857 85.6338 87.7471 cv
85.6338 87.5684 85.374 87.4824 84.8335 87.4824 cv
83.8237 87.4824 83.2085 87.9561 82.7158 89.1191 cv
f
73.0352 69.6025 mo
73.4854 69.8916 li
73.7407 70.0547 73.9551 70.1729 74.1255 70.2422 cv
74.6206 70.4463 74.7998 70.5186 74.7998 70.709 cv
74.7998 70.7793 74.7793 70.9482 74.7354 71.0742 cv
74.686 71.2188 74.6548 71.3691 74.6396 71.5244 cv
74.5942 71.96 74.3296 72.0703 74.1558 72.0703 cv
73.9399 72.0703 73.7134 71.7354 73.3564 71.1084 cv
73.1973 70.8232 72.9683 70.2529 72.8447 69.8281 cv
72.8257 69.7031 li
72.8257 69.625 72.8735 69.5791 72.9634 69.5791 cv
true sop
0 .13 .49 .98 nzopmsc
f
77.3623 70.7197 mo
76.626 71.4609 li
76.3652 71.8076 76.3652 72.1074 76.3062 72.166 cv
76.2568 72.2109 76.1802 72.2471 76.0801 72.2617 cv
76.0327 72.2656 li
75.8462 72.2656 75.7061 72.1309 75.6958 71.9424 cv
75.666 71.3975 li
75.6318 70.8506 li
75.6318 70.8184 li
75.6318 70.6074 75.7476 70.498 75.915 70.4629 cv
76.5962 70.2744 li
77.2983 69.9199 li
77.5034 69.8203 77.5664 69.793 77.6021 69.793 cv
77.6836 69.793 77.7529 69.8779 77.7529 69.9785 cv
77.7529 70.0244 77.728 70.0938 77.6836 70.1797 cv
77.3623 70.7197 li
cp
f
74.1255 72.9004 mo
74.6055 73.2559 li
74.7251 73.3262 74.874 73.3643 75.0356 73.3643 cv
75.2305 73.3643 75.5205 73.2871 75.792 73.1592 cv
76.21 72.9688 li
76.3062 72.9248 76.3906 72.9004 76.4585 72.9004 cv
76.7158 72.9004 76.9175 73.1709 76.9175 73.5117 cv
76.9175 73.9854 76.5757 74.4707 76.0801 75.1768 cv
75.73 75.917 li
75.4497 76.3174 75.2646 76.4619 75.0356 76.4619 cv
74.6548 76.4619 74.4707 76.2451 73.9009 75.1123 cv
73.4902 74.3027 73.3237 73.8066 73.3237 73.4131 cv
73.3237 73.0742 73.5 72.8389 73.7534 72.8389 cv
73.8579 72.8389 73.9854 72.8135 74.1255 72.9004 cv
f
74.5439 74.667 mo
74.5757 75.2773 li
74.5894 75.5527 74.8198 75.8262 75.0415 75.8262 cv
75.3369 75.8262 75.5474 75.3789 75.6631 74.7012 cv
75.7173 74.3906 75.7363 74.3408 75.7363 74.2559 cv
75.7363 74.0205 75.6572 73.9561 75.3545 73.9561 cv
75.1855 73.9619 li
74.96 73.9619 li
74.8164 73.9561 li
74.6157 73.9561 74.5386 74.1133 74.5386 74.5205 cv
false sop
0 0 0 0 cmyk
f
38.4531 60.1572 mo
41.5869 60.1572 li
41.5869 66.5898 li
45.2739 66.5898 li
45.2739 60.2217 li
54.5811 60.2217 li
54.5811 66.5898 li
58.2646 66.5898 li
58.2646 60.2217 li
61.4019 60.2217 li
61.4019 43.6074 li
57.8145 43.6074 li
57.6836 43.4141 li
57.2563 42.7715 56.6724 42.4414 55.9526 42.4414 cv
55.2466 42.4414 54.6494 42.8545 54.2598 43.6074 cv
51.6733 43.6074 li
51.4238 42.9326 50.6963 42.4414 49.9414 42.4414 cv
49.1211 42.4414 48.4565 42.8662 48.1191 43.6074 cv
45.3398 43.6074 li
44.8794 42.7813 44.3662 42.4434 43.562 42.4434 cv
42.7529 42.4434 42.23 42.7998 41.8467 43.6074 cv
38.4531 43.6074 li
38.4531 60.1572 li
cp
true sop
0 .13 .49 .98 nzopmsc
f
39.7935 58.9395 mo
60.1743 58.9395 li
60.1743 44.9707 li
39.7935 44.9707 li
39.7935 58.9395 li
cp
false sop
0 .13 .49 .98 cmyk
f
41.9111 48.166 mo
41.3765 48.166 40.9419 48.6016 40.9419 49.1338 cv
40.9419 49.668 41.3765 50.1055 41.9111 50.1055 cv
42.4478 50.1055 42.8828 49.668 42.8828 49.1338 cv
42.8828 48.6016 42.4478 48.166 41.9111 48.166 cv
0 0 0 0 cmyk
f
41.9111 48.2969 mo
41.4492 48.2969 41.0732 48.6719 41.0732 49.1338 cv
41.0732 49.5977 41.4492 49.9746 41.9111 49.9746 cv
42.3745 49.9746 42.7515 49.5977 42.7515 49.1338 cv
42.7515 48.6719 42.3745 48.2969 41.9111 48.2969 cv
cp
41.9111 50.2363 mo
41.3042 50.2363 40.8105 49.7422 40.8105 49.1338 cv
40.8105 48.5273 41.3042 48.0352 41.9111 48.0352 cv
42.519 48.0352 43.0142 48.5273 43.0142 49.1338 cv
43.0142 49.7422 42.519 50.2363 41.9111 50.2363 cv
cp
true sop
0 0 0 1 nzopmsc
f
57.9116 48.166 mo
57.3774 48.166 56.9409 48.6016 56.9409 49.1338 cv
56.9409 49.668 57.3774 50.1055 57.9116 50.1055 cv
58.4473 50.1055 58.8823 49.668 58.8823 49.1338 cv
58.8823 48.6016 58.4473 48.166 57.9116 48.166 cv
false sop
0 0 0 0 cmyk
f
57.9116 48.2969 mo
57.4487 48.2969 57.0723 48.6719 57.0723 49.1338 cv
57.0723 49.5977 57.4487 49.9746 57.9116 49.9746 cv
58.3745 49.9746 58.751 49.5977 58.751 49.1338 cv
58.751 48.6719 58.3745 48.2969 57.9116 48.2969 cv
cp
57.9116 50.2363 mo
57.3042 50.2363 56.8096 49.7422 56.8096 49.1338 cv
56.8096 48.5273 57.3042 48.0352 57.9116 48.0352 cv
58.519 48.0352 59.0137 48.5273 59.0137 49.1338 cv
59.0137 49.7422 58.519 50.2363 57.9116 50.2363 cv
cp
true sop
0 0 0 1 nzopmsc
f
41.9111 55.7627 mo
41.3765 55.7627 40.9419 56.1963 40.9419 56.7324 cv
40.9419 57.2686 41.3901 57.7002 41.9463 57.7002 cv
42.4619 57.7002 42.8828 57.2686 42.8828 56.7324 cv
42.8828 56.1963 42.4478 55.7627 41.9111 55.7627 cv
false sop
0 0 0 0 cmyk
f
41.9111 55.8945 mo
41.4492 55.8945 41.0732 56.2695 41.0732 56.7324 cv
41.0732 57.1934 41.4648 57.5684 41.9463 57.5684 cv
42.3901 57.5684 42.7515 57.1934 42.7515 56.7324 cv
42.7515 56.2695 42.3745 55.8945 41.9111 55.8945 cv
cp
41.9463 57.832 mo
41.3203 57.832 40.8105 57.3379 40.8105 56.7324 cv
40.8105 56.125 41.3042 55.6309 41.9111 55.6309 cv
42.519 55.6309 43.0142 56.125 43.0142 56.7324 cv
43.0142 57.3379 42.5352 57.832 41.9463 57.832 cv
cp
true sop
0 0 0 1 nzopmsc
f
57.9116 55.7627 mo
57.3774 55.7627 56.9409 56.1963 56.9409 56.7324 cv
56.9409 57.2686 57.3774 57.7002 57.9116 57.7002 cv
58.4473 57.7002 58.8823 57.2686 58.8823 56.7324 cv
58.8823 56.1963 58.4473 55.7627 57.9116 55.7627 cv
false sop
0 0 0 0 cmyk
f
57.9116 55.8945 mo
57.4487 55.8945 57.0723 56.2695 57.0723 56.7324 cv
57.0723 57.1934 57.4487 57.5684 57.9116 57.5684 cv
58.3745 57.5684 58.751 57.1934 58.751 56.7324 cv
58.751 56.2695 58.3745 55.8945 57.9116 55.8945 cv
cp
57.9116 57.832 mo
57.3042 57.832 56.8096 57.3379 56.8096 56.7324 cv
56.8096 56.125 57.3042 55.6309 57.9116 55.6309 cv
58.519 55.6309 59.0137 56.125 59.0137 56.7324 cv
59.0137 57.3379 58.519 57.832 57.9116 57.832 cv
cp
true sop
0 0 0 1 nzopmsc
f
44.9502 52.8203 mo
46.2646 54.4648 47.9224 55.2783 49.9717 55.2783 cv
51.8691 55.2783 53.1758 54.5986 54.7109 52.8203 cv
53.1787 51.248 51.7529 50.5898 49.8774 50.5898 cv
47.9072 50.5898 46.1299 51.3955 44.9502 52.8203 cv
false sop
0 0 0 0 cmyk
f
45.9189 52.8203 mo
47.2729 51.7686 48.4175 51.332 49.8306 51.332 cv
51.2559 51.332 52.3203 51.749 53.7104 52.8516 cv
52.5005 54.0518 51.4375 54.502 49.8076 54.502 cv
48.3594 54.502 47.041 53.9297 45.9189 52.8203 cv
0 .13 .49 .98 cmyk
f
47.5693 52.498 mo
48.3799 53.0039 49.0215 53.207 49.7778 53.207 cv
50.666 53.207 51.4087 52.9844 52.127 52.498 cv
51.3696 52.1348 50.583 51.9463 49.8115 51.9463 cv
49.0049 51.9463 48.2461 52.1318 47.5693 52.498 cv
0 0 0 0 cmyk
f
39.5073 46.3984 mo
60.459 46.3984 li
60.459 45.6855 li
39.5073 45.6855 li
39.5073 46.3984 li
cp
0 .13 .49 .98 cmyk
f
39.5503 46.3555 mo
60.416 46.3555 li
60.416 45.7285 li
39.5503 45.7285 li
39.5503 46.3555 li
cp
60.502 46.4414 mo
39.4644 46.4414 li
39.4644 45.6426 li
60.502 45.6426 li
60.502 46.4414 li
cp
0 0 0 1 cmyk
f
42.7202 44.7725 mo
42.7202 46.4189 li
42.7202 46.7744 li
42.7202 47.252 43.0933 47.6152 43.5825 47.6152 cv
44.147 47.6152 44.4673 47.3135 44.4673 46.7744 cv
44.4673 46.4189 li
44.4673 44.8037 li
44.4673 44.043 44.1558 43.5723 43.6582 43.5723 cv
43.5581 43.5723 43.4019 43.6123 43.2686 43.6729 cv
43.1611 43.7227 43.0859 43.7666 43.043 43.7998 cv
42.9673 43.8672 42.9004 43.9531 42.8501 44.0615 cv
42.7656 44.2344 42.7202 44.3584 42.7202 44.418 cv
0 0 0 0 cmyk
f
49.0215 46.4209 mo
49.0215 46.7744 li
49.0215 47.251 49.397 47.6152 49.8833 47.6152 cv
50.4482 47.6152 50.7681 47.3135 50.7681 46.7744 cv
50.7681 46.4209 li
50.7681 44.8037 li
50.7681 44.0498 50.457 43.5693 49.9658 43.5693 cv
49.3906 43.5693 49.0215 44.0391 49.0215 44.7725 cv
f
55.1309 44.7725 mo
55.1309 46.4189 li
55.1309 46.7744 li
55.1309 47.252 55.5054 47.6152 55.9932 47.6152 cv
56.5581 47.6152 56.8779 47.3135 56.8779 46.7744 cv
56.8779 46.4189 li
56.8779 44.8037 li
56.8779 44.043 56.5669 43.5723 56.0703 43.5723 cv
55.9717 43.5723 55.813 43.6123 55.6816 43.6729 cv
55.5723 43.7227 55.4966 43.7666 55.4551 43.7998 cv
55.3794 43.8672 55.3125 43.9531 55.2607 44.0615 cv
55.1763 44.2344 55.1309 44.3584 55.1309 44.418 cv
f
42.2661 64.1299 mo
44.1733 64.1299 li
44.1733 61.6758 li
42.2661 61.6758 li
42.2661 64.1299 li
cp
f
42.2661 65.459 mo
44.1733 65.459 li
44.1733 64.6836 li
42.2661 64.6836 li
42.2661 65.459 li
cp
f
55.2607 64.1299 mo
57.168 64.1299 li
57.168 61.6758 li
55.2607 61.6758 li
55.2607 64.1299 li
cp
f
55.2607 65.459 mo
57.168 65.459 li
57.168 64.6836 li
55.2607 64.6836 li
55.2607 65.459 li
cp
f
159.977 2.08203 mo
159.977 2.37695 159.977 3.25391 159.977 3.54688 cv
159.685 3.54688 159.019 3.54688 159.019 3.54688 cv
157.588 3.54688 155.194 3.54688 155.194 8.00781 cv
155.194 26.3242 li
155.194 37.5293 150.317 42.9707 140.281 42.9707 cv
128.958 42.9707 123.683 38.457 123.683 28.7617 cv
123.683 8.00781 li
123.683 3.54688 121.264 3.54688 119.128 3.54688 cv
119.128 3.54688 118.878 3.54688 118.678 3.54688 cv
118.678 3.25391 118.678 2.37695 118.678 2.08203 cv
119.104 2.08203 135.187 2.08203 135.616 2.08203 cv
135.616 2.37695 135.616 3.25391 135.616 3.54688 cv
135.417 3.54688 135.162 3.54688 135.162 3.54688 cv
133.06 3.54688 130.439 3.54688 130.439 8.00781 cv
130.439 27.832 li
130.439 36.377 134.01 40.5293 141.35 40.5293 cv
148.488 40.5293 152.265 36.0566 152.265 27.6016 cv
152.265 8.00781 li
152.265 3.54688 149.795 3.54688 147.991 3.54688 cv
147.991 3.54688 147.374 3.54688 147.087 3.54688 cv
147.087 3.25391 147.087 2.37695 147.087 2.08203 cv
147.51 2.08203 159.555 2.08203 159.977 2.08203 cv
0 .13 .49 .98 cmyk
f
178.277 40.6387 mo
178.277 42.1035 li
178.277 42.1035 164.409 42.1035 163.987 42.1035 cv
163.987 41.8105 163.987 40.9297 163.987 40.6387 cv
164.217 40.6387 164.553 40.6387 164.553 40.6387 cv
169.236 40.6387 169.839 37.0625 169.839 33.043 cv
169.839 8.99219 li
169.839 5.1543 167.621 3.54688 164.495 3.54688 cv
163.987 3.54688 li
163.987 2.08008 li
175.23 2.08008 li
199.551 31.8965 li
199.551 9.22656 li
199.551 4.09766 195.973 3.54688 194.436 3.54688 cv
194.436 3.54688 193.72 3.54688 193.42 3.54688 cv
193.42 3.25391 193.42 2.375 193.42 2.08008 cv
193.845 2.08008 207.437 2.08008 207.861 2.08008 cv
207.861 2.375 207.861 3.25391 207.861 3.54688 cv
207.618 3.54688 207.237 3.54688 207.237 3.54688 cv
204.709 3.54688 202.007 4.13281 202.007 11.1387 cv
202.007 42.3027 li
199.884 42.3125 li
172.291 8.92578 li
172.299 33.0195 li
172.299 37.0371 172.875 40.6387 177.718 40.6387 cv
f
254.94 33.6172 mo
263.735 9.01758 li
265.311 4.82813 264.3 3.54492 260.658 3.54492 cv
259.922 3.54492 li
259.922 2.08203 li
271.314 2.08203 li
271.314 3.54492 li
271.063 3.54492 li
269.828 3.54492 268.371 3.91406 267.292 6.66602 cv
253.952 42.2539 li
251.414 42.2539 li
236.934 6.99414 li
235.783 4.05859 234.426 3.54492 231.999 3.54492 cv
231.999 3.54492 231.824 3.54492 231.66 3.54492 cv
231.66 3.25195 231.66 2.37695 231.66 2.08203 cv
232.09 2.08203 247.78 2.08203 248.207 2.08203 cv
248.207 2.37695 248.207 3.25195 248.207 3.54492 cv
247.902 3.54492 247.132 3.54492 247.132 3.54492 cv
244.301 3.54492 243.755 5.31836 244.559 7.47461 cv
254.94 33.6172 li
cp
f
321.723 3.9668 mo
321.714 21.6816 li
325.141 21.6816 li
331.374 21.6816 334.121 18.9082 334.121 12.4082 cv
334.121 7.125 330.723 3.71289 325.595 3.71289 cv
324.398 3.71289 322.758 3.80664 321.723 3.9668 cv
cp
327.869 2.08008 mo
336.729 2.08008 341.128 5.3457 341.128 12.0586 cv
341.128 17.75 336.688 20.6348 333.182 22.0508 cv
332.927 22.1563 li
342.74 37.1016 li
344.31 39.5234 345.592 40.459 348.296 40.6055 cv
348.296 40.8711 348.296 41.8008 348.296 42.1035 cv
347.871 42.1035 338.05 42.1035 338.05 42.1035 cv
326.145 23.3145 li
321.714 23.3145 li
321.714 35.7695 li
321.714 40.2891 323.724 40.6387 326.561 40.6387 cv
326.561 40.6387 327.08 40.6387 327.354 40.6387 cv
327.354 40.9297 327.354 41.8105 327.354 42.1035 cv
326.922 42.1035 310.384 42.1035 309.953 42.1035 cv
309.953 41.8105 309.953 40.9297 309.953 40.6387 cv
310.225 40.6387 310.743 40.6387 310.743 40.6387 cv
312.688 40.6387 314.957 39.7559 314.957 37.2773 cv
314.957 8.18164 li
314.957 3.54688 312.214 3.54688 310.743 3.54688 cv
310.743 3.54688 310.225 3.54688 309.953 3.54688 cv
309.953 3.25391 309.953 2.37695 309.953 2.08008 cv
310.385 2.08008 327.869 2.08008 327.869 2.08008 cv
f
369.453 34.5098 mo
369.453 29.6328 365.271 27.7109 361.367 25.6816 cv
356.803 23.3027 351.541 20.8457 351.541 13.459 cv
351.541 6.30273 356.984 1.68555 364.765 1.68555 cv
367.943 1.68555 371.556 2.32031 373.133 2.64063 cv
373.678 10.4277 li
372.179 10.6426 li
371.484 6.54492 369.358 3.40234 364.751 3.40234 cv
360.422 3.40234 357.216 6.06055 357.216 10.8477 cv
357.216 15.3613 361.381 17.2109 365.265 19.166 cv
370.018 21.5605 375.471 24.0391 375.471 31.4941 cv
375.471 39.748 368.116 43.4434 361.311 43.4434 cv
358.614 43.4434 354.851 42.8945 351.834 41.1855 cv
350.878 32.5195 li
352.332 32.2637 li
353.442 38.0156 357.09 41.3496 361.904 41.3496 cv
366.513 41.3496 369.453 38.5391 369.453 34.5098 cv
f
397.999 2.08203 mo
397.999 2.37695 397.999 3.25391 397.999 3.54688 cv
397.77 3.54688 397.436 3.54688 397.436 3.54688 cv
395.154 3.54688 393.05 3.97461 393.05 7.08008 cv
393.05 37.1035 li
393.05 40.2109 395.154 40.6387 397.436 40.6387 cv
397.436 40.6387 397.77 40.6387 397.999 40.6387 cv
397.999 40.9297 397.999 41.8086 397.999 42.1016 cv
397.571 42.1016 381.712 42.1016 381.283 42.1016 cv
381.283 41.8086 381.283 40.9297 381.283 40.6387 cv
381.512 40.6387 381.848 40.6387 381.848 40.6387 cv
384.129 40.6387 386.234 40.2109 386.234 37.1035 cv
386.234 7.08008 li
386.234 3.97461 384.129 3.54688 381.848 3.54688 cv
381.848 3.54688 381.512 3.54688 381.283 3.54688 cv
381.283 3.25391 381.283 2.37695 381.283 2.08203 cv
381.712 2.08203 397.571 2.08203 397.999 2.08203 cv
f
229.339 2.08203 mo
229.339 2.37695 229.339 3.25391 229.339 3.54688 cv
229.111 3.54688 228.776 3.54688 228.776 3.54688 cv
226.496 3.54688 224.39 3.97461 224.39 7.08008 cv
224.39 37.1035 li
224.39 40.2109 226.496 40.6387 228.776 40.6387 cv
228.776 40.6387 229.111 40.6387 229.339 40.6387 cv
229.339 40.9297 229.339 41.8086 229.339 42.1016 cv
228.914 42.1016 213.055 42.1016 212.626 42.1016 cv
212.626 41.8086 212.626 40.9297 212.626 40.6387 cv
212.855 40.6387 213.191 40.6387 213.191 40.6387 cv
215.467 40.6387 217.577 40.2109 217.577 37.1035 cv
217.577 7.08008 li
217.577 3.97461 215.467 3.54688 213.191 3.54688 cv
213.191 3.54688 212.855 3.54688 212.626 3.54688 cv
212.626 3.25391 212.626 2.37695 212.626 2.08203 cv
213.055 2.08203 228.914 2.08203 229.339 2.08203 cv
f
562.459 59.875 mo
562.596 70.498 li
562.596 70.498 561.307 70.8223 560.899 70.9336 cv
560.519 66.291 559.467 62.5 552.04 62.5 cv
542.061 62.5 li
542.061 82.1348 li
550.627 82.1348 li
554.829 82.1348 555.971 79.7832 556.446 75.7285 cv
556.767 75.7285 557.786 75.7285 558.151 75.7285 cv
558.151 76.2773 558.151 92.1484 558.151 92.1484 cv
556.451 92.1738 li
556.188 88.2461 555.264 85.1973 550.662 85.1973 cv
542.061 85.1973 li
542.061 102.438 li
542.061 107.449 546.377 107.449 550.949 107.449 cv
559.151 107.449 562.953 106.936 565.246 98.6367 cv
565.58 98.7207 566.928 99.0098 566.928 99.0098 cv
564.631 110.076 li
564.631 110.076 527.918 110.076 527.369 110.076 cv
527.369 109.713 527.369 108.605 527.369 108.238 cv
527.656 108.238 528.079 108.238 528.079 108.238 cv
530.938 108.238 533.581 107.705 533.581 103.805 cv
533.581 66.1465 li
533.581 62.25 530.938 61.7109 528.079 61.7109 cv
528.079 61.7109 527.656 61.7109 527.369 61.7109 cv
527.369 61.3477 527.369 60.2461 527.369 59.875 cv
527.916 59.875 562.459 59.875 562.459 59.875 cv
f
351.684 62.2383 mo
351.68 84.4629 li
355.969 84.4629 li
363.783 84.4629 367.228 80.9805 367.228 72.8223 cv
367.228 66.2031 362.962 61.9199 356.537 61.9199 cv
355.032 61.9199 353.108 62.0078 351.684 62.2383 cv
cp
359.391 59.875 mo
370.505 59.875 376.022 63.9688 376.022 72.3867 cv
376.022 79.5273 370.446 83.1426 366.055 84.9219 cv
365.73 85.0547 li
378.045 103.803 li
380.015 106.842 381.623 108.016 385.012 108.201 cv
385.012 108.531 385.012 109.699 385.012 110.076 cv
384.484 110.076 372.161 110.076 372.161 110.076 cv
357.224 86.502 li
351.68 86.502 li
351.68 102.135 li
351.68 107.801 354.191 108.238 357.744 108.238 cv
357.744 108.238 358.399 108.238 358.739 108.238 cv
358.739 108.607 358.739 109.713 358.739 110.076 cv
358.2 110.076 337.455 110.076 336.918 110.076 cv
336.918 109.713 336.918 108.607 336.918 108.238 cv
337.261 108.238 337.909 108.238 337.909 108.238 cv
340.35 108.238 343.199 107.137 343.199 104.027 cv
343.199 67.5273 li
343.199 61.7109 339.76 61.7109 337.909 61.7109 cv
337.909 61.7109 337.261 61.7109 336.918 61.7109 cv
336.918 61.3457 336.918 60.2461 336.918 59.875 cv
337.462 59.875 359.391 59.875 359.391 59.875 cv
f
409.041 59.8652 mo
409.041 60.2344 409.041 61.334 409.041 61.7012 cv
408.75 61.7012 408.331 61.7012 408.331 61.7012 cv
405.472 61.7012 402.828 62.2422 402.828 66.1367 cv
402.828 103.799 li
402.828 107.695 405.472 108.23 408.331 108.23 cv
408.331 108.23 408.75 108.23 409.041 108.23 cv
409.041 108.598 409.041 109.703 409.041 110.066 cv
408.507 110.066 388.604 110.066 388.071 110.066 cv
388.071 109.703 388.071 108.598 388.071 108.23 cv
388.356 108.23 388.778 108.23 388.778 108.23 cv
391.64 108.23 394.281 107.695 394.281 103.799 cv
394.281 66.1367 li
394.281 62.2422 391.64 61.7012 388.778 61.7012 cv
388.778 61.7012 388.356 61.7012 388.071 61.7012 cv
388.071 61.334 388.071 60.2344 388.071 59.8652 cv
388.604 59.8652 408.507 59.8652 409.041 59.8652 cv
f
406.695 2.08203 mo
433.172 2.08203 li
434.498 2.08203 436.211 1.74609 436.478 .00390625 cv
437.766 0 li
436.749 10.4395 li
435.33 10.4375 li
435.242 8.02734 434.89 4.52344 431.021 4.52344 cv
422.94 4.52344 li
422.94 35.4219 li
422.94 40.2363 425.257 40.6387 427.836 40.6387 cv
427.836 40.6387 428.404 40.6387 428.68 40.6387 cv
428.68 40.9297 428.68 41.8086 428.68 42.1016 cv
428.253 42.1016 410.878 42.1016 410.446 42.1016 cv
410.446 41.8086 410.446 40.9297 410.446 40.6387 cv
410.727 40.6387 411.293 40.6387 411.293 40.6387 cv
414.329 40.6387 416.186 40.3906 416.186 35.5371 cv
416.186 4.52344 li
408.017 4.52344 li
403.855 4.52344 403.458 6.34766 402.652 10.3926 cv
401.215 10.3926 li
402.135 .0859375 li
402.135 .0859375 403.114 .0859375 403.308 .0859375 cv
403.844 1.75195 405.287 2.08594 406.695 2.08203 cv
f
478.705 2.08203 mo
478.705 3.56836 li
476.399 3.69336 475.013 5.26953 473.969 6.73828 cv
473.969 6.74023 463.809 22.3965 463.809 22.3965 cv
463.809 35.1875 li
463.809 40.2715 465.657 40.6387 468.7 40.6387 cv
468.7 40.6387 469.268 40.6387 469.55 40.6387 cv
469.55 40.9297 469.55 41.8086 469.55 42.1016 cv
469.122 42.1016 451.74 42.1016 451.309 42.1016 cv
451.309 41.8086 451.309 40.9297 451.309 40.6387 cv
451.59 40.6387 452.157 40.6387 452.157 40.6387 cv
455.329 40.6387 457.053 39.8457 457.053 35.6543 cv
457.053 23.3496 li
446.024 7.58398 li
444.336 5.15234 443.074 3.54688 440.396 3.54688 cv
440.061 3.54688 li
440.061 2.08203 li
456.594 2.08203 li
456.594 3.54688 li
456.084 3.54688 li
452.912 3.54688 452.678 5.22852 454.033 7.15039 cv
462.58 20.3984 li
470.141 8.43555 li
471.873 5.82617 472.373 3.54688 468.089 3.54688 cv
467.433 3.54688 li
467.435 2.08203 li
478.705 2.08203 li
cp
f
498.272 20.3516 mo
498.272 30.2383 502.639 40.877 512.225 40.877 cv
521.002 40.877 525.271 34.7891 525.271 22.2656 cv
525.271 13.0742 520.361 3.30664 511.266 3.30664 cv
499.21 3.30664 498.272 16.3555 498.272 20.3516 cv
cp
490.842 22.3828 mo
490.842 10.5117 499.863 1.21094 511.382 1.21094 cv
523.938 1.21094 532.702 9.34375 532.702 20.9902 cv
532.702 33.7266 523.855 42.9707 511.662 42.9707 cv
499.599 42.9707 490.842 34.3145 490.842 22.3828 cv
f
555.109 42.0957 mo
555.109 41.7988 555.109 40.9297 555.109 40.6367 cv
554.894 40.6367 554.603 40.6367 554.603 40.6367 cv
551.962 40.6367 548.979 40.6367 548.979 37.1016 cv
548.979 22.2695 li
556.086 22.2695 li
560.196 22.2695 560.779 25.4453 560.808 27.9531 cv
561.086 27.9531 561.833 27.9531 562.125 27.9531 cv
562.125 15.1387 li
562.125 15.1309 li
561.833 15.1309 561.08 15.1309 560.805 15.1309 cv
560.776 17.2148 560.296 19.8281 556.985 19.8281 cv
548.979 19.8281 li
548.979 4.17383 li
558.11 4.17383 li
562.891 4.17383 563.676 7.45703 563.989 10.8984 cv
564.31 10.8086 565.104 10.6172 565.335 10.5527 cv
565.231 2.08789 li
537.267 2.08789 li
537.267 2.38281 537.267 3.25391 537.267 3.54492 cv
537.495 3.54492 537.837 3.54492 537.837 3.54492 cv
540.113 3.54492 542.221 3.97266 542.221 7.08008 cv
542.221 37.1016 li
542.221 40.209 540.113 40.6367 537.837 40.6367 cv
537.837 40.6367 537.495 40.6367 537.267 40.6367 cv
537.267 40.9297 537.267 41.7969 537.267 42.0957 cv
555.109 42.0957 li
cp
f
121.848 84.9336 mo
121.848 77.4707 124.875 70.1406 130.089 65.4707 cv
134.925 61.1348 141.272 58.7012 148.441 58.7012 cv
154.861 58.7012 160.212 59.8613 165.445 62.3066 cv
165.977 73.9258 li
164.327 74.1387 li
162.435 67.4004 159.285 61.2324 148.65 61.2324 cv
137.724 61.2324 130.935 69.8828 130.935 83.8125 cv
130.935 96.2129 136.424 107.938 149.718 107.938 cv
157.189 107.938 162.518 105.139 166.539 99.9688 cv
167.853 102.428 li
163.323 108.283 156.327 111.404 148.364 111.404 cv
132.175 111.404 121.848 101.852 121.848 84.9336 cv
f
230.098 69.582 mo
230.098 69.582 228.433 100.586 228.433 100.588 cv
228.13 107.453 230.26 108.055 234.872 108.229 cv
235.301 108.229 li
235.301 110.053 li
218.379 110.053 li
218.379 108.229 li
219.024 108.229 li
224.726 108.002 225.075 104.83 225.34 100.195 cv
227.306 68.459 li
227.562 64.1289 225.189 61.6719 221.2 61.6719 cv
221.2 61.6719 220.885 61.6719 220.619 61.6719 cv
220.619 61.2754 220.619 60.2422 220.619 59.8438 cv
221.236 59.8438 234.424 59.8438 234.828 59.8438 cv
234.998 60.2461 251.878 97.8887 251.878 97.8887 cv
251.878 97.8887 267.838 60.2402 268.008 59.8379 cv
268.408 59.8379 281.939 59.8379 281.939 59.8379 cv
281.937 61.6875 li
281.67 61.6875 li
276.024 61.6875 275.023 63.4414 275.449 70.5371 cv
277.391 103.834 li
277.688 107.73 279.73 108.082 283.573 108.227 cv
283.573 108.617 283.573 109.637 283.573 110.039 cv
282.948 110.039 263.367 110.039 262.742 110.039 cv
262.742 109.637 262.742 108.605 262.742 108.227 cv
262.8 108.221 262.879 108.217 262.879 108.217 cv
266.271 108.012 268.723 107.871 268.723 104.463 cv
268.65 100.863 li
268.65 100.854 267.122 68.7617 267.122 68.7617 cv
267.122 68.7617 249.934 110.02 249.764 110.42 cv
249.488 110.42 248.527 110.42 248.249 110.42 cv
248.077 110.014 230.098 69.582 230.098 69.582 cv
f
431.685 62.2578 mo
431.681 101.678 li
431.681 107 433.932 107.859 439.316 107.859 cv
452 107.859 457.774 96.9375 457.774 86.2344 cv
457.774 69.5977 450.907 62.0215 436.788 62.0215 cv
435.544 62.0215 432.887 62.1328 431.685 62.2578 cv
cp
416.944 110.066 mo
416.944 108.227 li
417.655 108.227 li
420.513 108.227 423.156 107.691 423.156 103.791 cv
423.156 66.1367 li
423.156 62.2402 420.513 61.7031 417.655 61.7031 cv
416.944 61.7031 li
416.944 59.8652 li
439.387 59.8457 li
447.729 59.8457 454.717 61.9434 459.598 66.4863 cv
464.406 70.9648 466.952 77.3047 466.952 84.834 cv
466.952 91.8672 464.151 98.6797 459.271 103.523 cv
454.357 108.391 447.481 110.053 440.52 110.053 cv
416.944 110.066 li
cp
f
509.676 107.484 mo
509.676 95.1777 li
509.676 92.4844 507.718 91.0605 504.009 91.0605 cv
503.422 91.0605 li
503.422 89.2695 li
522.719 89.2695 li
522.719 91.0605 li
522.135 91.0605 li
519.437 91.0605 518.01 92.4844 518.01 95.1777 cv
518.002 108.877 li
513.396 110.359 507.218 111.529 500.353 111.529 cv
483.784 111.529 473.072 100.787 473.072 84.168 cv
473.072 66.4883 487.197 58.4336 500.488 58.4336 cv
506.441 58.4336 512.561 59.6191 516.44 60.916 cv
517.239 72.9004 li
515.556 73.0059 li
513.475 64.375 509.626 60.9902 500.982 60.9902 cv
489.319 60.9902 482.249 69.5898 482.249 83.4277 cv
482.249 96.1426 488.218 108.742 501.547 108.742 cv
504.619 108.811 507.797 108.34 509.676 107.484 cv
f
315.744 82.7363 mo
322.063 83.1973 325.425 84.5879 328.253 87.4863 cv
330.44 89.7227 331.596 92.5586 331.596 95.8613 cv
331.596 103.74 324.373 110.053 314.983 110.053 cv
290.39 110.049 li
290.39 108.23 li
291.383 108.23 li
293.817 108.23 296.669 107.07 296.669 103.953 cv
296.669 67.5313 li
296.669 61.7168 293.227 61.7168 291.383 61.7168 cv
290.39 61.7168 li
290.39 59.8809 li
312.676 59.8691 li
323.14 59.8691 328.901 63.6621 328.901 70.8477 cv
328.901 78.7988 321.904 81.7402 315.744 82.7363 cv
305.455 61.7168 mo
305.455 81.877 li
309.231 81.877 li
316.147 81.877 319.957 78.5234 319.957 72.1055 cv
319.957 65.0137 316.607 61.7168 310 61.7168 cv
305.455 61.7168 li
cp
305.455 84.0703 mo
305.455 101.734 li
305.455 106.641 307.018 108.045 312.11 108.045 cv
318.225 108.045 322.839 103.012 322.839 96.1563 cv
322.839 88.4453 318.145 84.0703 310.279 84.0703 cv
305.455 84.0703 li
cp
f
189.244 70.1035 mo
196.257 89.6582 li
182.212 89.6582 li
189.244 70.1035 li
cp
190.115 59.8594 mo
190.115 59.8594 174.182 103.188 174.182 103.193 cv
173 106.271 170.914 108.172 167.823 108.172 cv
167.652 108.172 li
167.646 110.055 li
182.924 110.055 li
182.919 108.172 li
182.255 108.172 li
178.577 108.172 176.074 106.996 177.675 102.248 cv
181.321 92.125 li
197.14 92.125 li
201.096 103.16 li
202.231 106.643 200.751 108.223 196.972 108.223 cv
196.531 108.223 li
196.533 110.074 li
215.969 110.074 li
215.974 108.223 li
215.821 108.223 li
213.23 108.223 211.457 106.865 210.245 103.422 cv
193.896 59.8672 li
190.115 59.8594 li
cp
f
301.983 2.07813 mo
302.092 10.543 li
302.092 10.543 301.063 10.8027 300.741 10.8906 cv
300.438 7.18945 299.6 4.17188 293.681 4.17188 cv
285.73 4.17188 li
285.73 19.8125 li
292.555 19.8125 li
295.903 19.8125 296.814 17.9395 297.189 14.709 cv
297.448 14.709 298.26 14.709 298.554 14.709 cv
298.554 15.1465 298.554 27.793 298.554 27.793 cv
297.194 27.8125 li
296.985 24.6855 296.252 22.2539 292.58 22.2539 cv
285.73 22.2539 li
285.73 35.9902 li
285.73 39.9883 289.169 39.9883 292.812 39.9883 cv
299.346 39.9883 302.374 39.5762 304.205 32.9609 cv
304.47 33.0313 305.542 33.2598 305.542 33.2598 cv
303.713 42.0801 li
303.713 42.0801 274.451 42.0801 274.017 42.0801 cv
274.017 41.791 274.017 40.9102 274.017 40.6172 cv
274.245 40.6172 274.583 40.6172 274.583 40.6172 cv
276.859 40.6172 278.97 40.1895 278.97 37.082 cv
278.97 7.07422 li
278.97 3.9707 276.859 3.54297 274.583 3.54297 cv
274.583 3.54297 274.245 3.54297 274.017 3.54297 cv
274.017 3.25 274.017 2.37109 274.017 2.07813 cv
274.45 2.07813 301.983 2.07813 301.983 2.07813 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
